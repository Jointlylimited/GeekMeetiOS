//
//  AddPhotosInteractor.swift
//  GeekMeets
//
//  Created by SOTSYS216 on 21/04/20.
//  Copyright (c) 2020 SOTSYS203. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//

import UIKit
import CoreLocation

protocol AddPhotosInteractorProtocol {
    func uploadImgToS3(with obj: Dictionary<String, Any>, images : [UIImage])
    func callUserSignUpAPI(signParams : Dictionary<String, String>)
    func callSocialSignUpAPI(signParams : Dictionary<String, String>)
}

protocol AddPhotosDataStore {
    //var name: String { get set }
}

class AddPhotosInteractor: AddPhotosInteractorProtocol, AddPhotosDataStore {
    var presenter: AddPhotosPresentationProtocol?
    //var name: String = ""
    
    var paramDetails : Dictionary<String, Any>!
    var thumbURlUpload: (path: String, name: String) {
        let folderName = user_Profile
        let timeStamp = authToken.timeStamp
        let imgExtension = ".jpeg"
        let path = "\(folderName)\(timeStamp)\(imgExtension)"
        return (path: path, name: "\(timeStamp)\(imgExtension)")
    }
    
    func uploadImgToS3(with obj: Dictionary<String, Any>, images : [UIImage]) {
        if images.count == 0 {
            _ = AppSingleton.sharedInstance().showAlert(kSelectUserProfile, okTitle: "OK")
            return
        }

        for indexValue in 0..<images.count {
            let task = images[0]
        
            DispatchQueue.main.async {
                LoaderView.sharedInstance.showLoader()
            }
            AWSHelper.setup()
            AWSHelper.shared.upload(img: task, imgPath: thumbURlUpload.path, imgName: thumbURlUpload.name) { [weak self] (isUploaded, path, error) in
                DispatchQueue.main.async {
                    LoaderView.sharedInstance.hideLoader()
                }
                print(path)
                guard let `self` = self else {return}
                if let err = error {
                    print("ERROR : \(err.localizedDescription)")
                    _ = AppSingleton.sharedInstance().showAlert(err.localizedDescription, okTitle: "OK")
                } else if isUploaded {
                    var imgsUserPhotosDict:[NSDictionary] = []
                    self.paramDetails = obj
//                    if indexValue == 0 {
                        self.paramDetails["vProfileImage"] = self.thumbURlUpload.name
                        let dict = ["vMedia":self.thumbURlUpload.name, "tiMediaType":1, "fHeight":images[indexValue].size.height, "fWidth": images[indexValue].size.height] as [String : Any]
                        imgsUserPhotosDict.append(dict as NSDictionary)
//                    } else {
//                        let dict = ["vMedia":self.thumbURlUpload.name, "tiMediaType":1, "fHeight":images[indexValue].size.height, "fWidth": images[indexValue].size.height] as [String : Any]
//                        imgsUserPhotosDict.append(dict as NSDictionary)
//                    }
//
//                    if indexValue == images.count - 1 {
//                        let photoJsonString = json(from: imgsUserPhotosDict)
//                        self.paramDetails["photos"] = photoJsonString
                        if obj["vSocialId"] as! String != "" {
                            self.callSocialSignUpAPI(signParams: self.paramDetails as! Dictionary<String, String>)
                        } else {
                            self.callUserSignUpAPI(signParams: self.paramDetails as! Dictionary<String, String>)
                        }
//                    }
                } else {
                    _ = AppSingleton.sharedInstance().showAlert(kSomethingWentWrong, okTitle: "OK")
                }
            }
        }
    }
    
    // MARK: Do something
    func callUserSignUpAPI(signParams : Dictionary<String, String>) {
      print(signParams)
        LoaderView.sharedInstance.showLoader()
        UserAPI.signUp(nonce: authToken.nonce, timestamp: authToken.timeStamp, token: authToken.token, tiIsSocialLogin: UserAPI.TiIsSocialLogin_signUp(rawValue: "0")!, vEmail: signParams["vEmail"]!, vPassword: signParams["vPassword"]!, vCountryCode: signParams["vCountryCode"]!, vPhone: signParams["vPhone"]!, vName: signParams["vName"]!, dDob: signParams["dDob"]!, tiAge: signParams["tiAge"]!, tiGender: UserAPI.TiGender_signUp(rawValue: signParams["tiGender"]!)!, iCurrentStatus: UserAPI.ICurrentStatus_signUp(rawValue: signParams["iCurrentStatus"]!)!, txCompanyDetail: signParams["txCompanyDetail"]!, txAbout: signParams["txAbout"]!, photos: signParams["photos"]!, vTimeOffset: signParams["vTimeOffset"]!, vTimeZone: signParams["vTimeZone"]!, vDeviceToken: vDeviceToken, tiDeviceType: UserAPI.TiDeviceType_signUp(rawValue: 1)!, vDeviceName: vDeviceName, vDeviceUniqueId: vDeviceUniqueId ?? "", vApiVersion: vApiVersion, vAppVersion: vAppVersion, vOsVersion: vOSVersion, vIpAddress: vIPAddress) { (response, error) in
            
            LoaderView.sharedInstance.hideLoader()
            if response?.responseCode == 200 {
                self.presenter?.getSignUpResponse(response : response!)
            } else if response?.responseCode == 203 {
                AppSingleton.sharedInstance().logout()
            } else {
                if error != nil {
                    AppSingleton.sharedInstance().showAlert(kSomethingWentWrong, okTitle: "OK")
                } else {
                    AppSingleton.sharedInstance().showAlert((response?.responseMessage!)!, okTitle: "OK")
                }
            }
        }
    }
    
    func callSocialSignUpAPI(signParams : Dictionary<String, String>) {
        let socialType = UserDataModel.getSocialType()
        LoaderView.sharedInstance.showLoader()
           UserAPI.signUp(nonce: authToken.nonce, timestamp: authToken.timeStamp, token: authToken.token, tiIsSocialLogin: UserAPI.TiIsSocialLogin_signUp(rawValue: "1")!, vEmail: signParams["vEmail"]!, vPassword: signParams["vPassword"]!, vCountryCode: signParams["vCountryCode"]!, vPhone: signParams["vPhone"]!, vName: signParams["vName"]!, dDob: signParams["dDob"]!, tiAge: signParams["tiAge"]!, tiGender: UserAPI.TiGender_signUp(rawValue: signParams["tiGender"]!)!, iCurrentStatus: UserAPI.ICurrentStatus_signUp(rawValue: signParams["iCurrentStatus"]!)!, txCompanyDetail: signParams["txCompanyDetail"]!, txAbout: signParams["txAbout"]!, photos: signParams["photos"]!, vTimeOffset: signParams["vTimeOffset"]!, vTimeZone: signParams["vTimeZone"]!, vDeviceToken: vDeviceToken, tiDeviceType: UserAPI.TiDeviceType_signUp(rawValue: 1)!, vDeviceName: vDeviceName, vDeviceUniqueId: vDeviceUniqueId ?? "", vApiVersion: vApiVersion, vAppVersion: vAppVersion, vOsVersion: vOSVersion, vIpAddress: vIPAddress, vSocialId: signParams["vSocialId"]!, tiSocialType: UserAPI.TiSocialType_signUp(rawValue: socialType)!, vProfileImage: signParams["vProfileImage"]!, fLatitude: Float(signParams["fLatitude"]!), fLongitude: Float(signParams["fLongitude"]!)) { (response, error) in
               
            LoaderView.sharedInstance.hideLoader()
               if response?.responseCode == 200 {
                   self.presenter?.getSignUpResponse(response : response!)
               } else if response?.responseCode == 203 {
                   AppSingleton.sharedInstance().logout()
               } else {
                   if error != nil {
                       AppSingleton.sharedInstance().showAlert(kSomethingWentWrong, okTitle: "OK")
                   } else {
                       AppSingleton.sharedInstance().showAlert((response?.responseMessage!)!, okTitle: "OK")
                   }
               }
           }
       }
}
