//
//  OTPEnterViewController.swift
//  GeekMeets
//
//  Created by SOTSYS216 on 21/04/20.
//  Copyright (c) 2020 SOTSYS203. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//

import UIKit

protocol OTPEnterProtocol: class {
    func displaySomething()
}

class OTPEnterViewController: UIViewController, OTPEnterProtocol {
    //var interactor : OTPEnterInteractorProtocol?
    var presenter : OTPEnterPresentationProtocol?
    
    @IBOutlet weak var tfOTP1: BottomBorderTF!
    @IBOutlet weak var tfOTP2: BottomBorderTF!
    @IBOutlet weak var tfOTP3: BottomBorderTF!
    @IBOutlet weak var tfOTP4: BottomBorderTF!
    @IBOutlet weak var tfOTP5: BottomBorderTF!
    @IBOutlet weak var tfOTP6: BottomBorderTF!
    @IBOutlet weak var btnResend: UIButton!
    @IBOutlet weak var lblTime: UILabel!
    @IBOutlet weak var btnVerifyOTP: GradientButton!
    @IBOutlet weak var otpContainerView: UIView!
    
       
    let otpStackView = OTPStackView()
    var isFromNewMobile : Bool = false
    var alertView: CustomAlertView!
    
  // MARK: Object lifecycle
    
    override init(nibName nibNameOrNil: String?, bundle nibBundleOrNil: Bundle?) {
        super.init(nibName: nibNameOrNil, bundle: nibBundleOrNil)
        setup()
    }
    
    required init?(coder aDecoder: NSCoder) {
        super.init(coder: aDecoder)
        setup()
    }
    
    // MARK: Setup
    
    private func setup() {
        let viewController = self
        let interactor = OTPEnterInteractor()
        let presenter = OTPEnterPresenter()
        
        //View Controller will communicate with only presenter
        viewController.presenter = presenter
        //viewController.interactor = interactor
        
        //Presenter will communicate with Interector and Viewcontroller
        presenter.viewController = viewController
        presenter.interactor = interactor
        
        //Interactor will communucate with only presenter.
        interactor.presenter = presenter
    }
    
    
    // MARK: View lifecycle
    
    override func viewDidLoad() {
        super.viewDidLoad()
        doSomething()
    }
    override func viewWillDisappear(_ animated: Bool) {
       
        if !isFromNewMobile {
            self.navigationController?.isNavigationBarHidden = false
        } else {
            self.navigationController?.isNavigationBarHidden = true
        }
    }
    
    func doSomething() {
        
            self.navigationController?.isNavigationBarHidden = false
            self.navigationItem.leftBarButtonItem = leftSideBackBarButton
            let range = (btnResend!.currentTitle! as NSString).range(of: "Resend")
                       let attributedString = NSMutableAttributedString(string:(btnResend?.currentTitle)!)
                       attributedString.addAttribute(NSAttributedString.Key.foregroundColor, value: AppCommonColor.pinkColor , range: range)
                       btnResend?.setAttributedTitle(attributedString, for: .normal)
      
                    btnVerifyOTP.isHidden = true
                    otpContainerView.addSubview(otpStackView)
                    otpStackView.delegate = self
                    otpStackView.heightAnchor.constraint(equalTo: otpContainerView.heightAnchor).isActive = true
                    otpStackView.centerXAnchor.constraint(equalTo: otpContainerView.centerXAnchor).isActive = true
                    otpStackView.centerYAnchor.constraint(equalTo: otpContainerView.centerYAnchor).isActive = true
  
    }

    func displaySomething() {
        //nameTextField.text = viewModel.name
    }
  
  @IBAction func actionVerifyOTP(_ sender: Any) {
    if !isFromNewMobile {
        print("Final OTP : ",otpStackView.getOTP())
        otpStackView.setAllFieldColor(isWarningColor: true, color: .yellow)
        self.presenter?.actionVerifyOTP()
    } else {
        self.navigationController?.isNavigationBarHidden = true
        self.showAlertView()
    }
  }
}

 extension OTPEnterViewController: OTPDelegate {
            
            func didChangeValidity(isValid: Bool) {
                btnVerifyOTP.isHidden = !isValid
            }
  
}

extension OTPEnterViewController {
    func showAlertView() {
      alertView = CustomAlertView.initAlertView(title: "Successful", message: "Your mobile is changed & verified Successfully", btnRightStr: "", btnCancelStr: "", btnCenter: "OK", isSingleButton: true)
      alertView.delegate1 = self
      alertView.frame = self.view.frame
      self.view.addSubview(alertView)
    }
}

extension OTPEnterViewController : AlertViewCentreButtonDelegate {
    
    func centerButtonAction() {
        let accVC = GeekMeets_StoryBoard.Menu.instantiateViewController(withIdentifier: GeekMeets_ViewController.AccountSettingScreen)
        self.pop(toLast: accVC.classForCoder)
    }
}
