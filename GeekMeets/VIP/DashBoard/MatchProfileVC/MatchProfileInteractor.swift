//
//  MatchProfileInteractor.swift
//  GeekMeets
//
//  Created by SOTSYS124 on 21/04/20.
//  Copyright (c) 2020 SOTSYS203. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//

import UIKit

protocol MatchProfileInteractorProtocol {
    func callUserProfileAPI(id : String)
    func callBlockUserAPI(iBlockTo: String, tiIsBlocked: String)
    func callBlockUserListAPI()
}

protocol MatchProfileDataStore {
    //var name: String { get set }
}

class MatchProfileInteractor: MatchProfileInteractorProtocol, MatchProfileDataStore {
    var presenter: MatchProfilePresentationProtocol?
    //var name: String = ""
    
    // MARK: Do something
    
    func callUserProfileAPI(id : String){
        LoaderView.sharedInstance.showLoader()
        UserAPI.userProfile(nonce: authToken.nonce, timestamp: authToken.timeStamp, token: authToken.token, authorization: UserDataModel.authorization, _id: id) { (response, error) in
            
            LoaderView.sharedInstance.hideLoader()
            if response?.responseCode == 200 {
                self.presenter?.getUserProfileResponse(response: response!)
            } else if response?.responseCode == 400 {
                self.presenter?.getUserProfileResponse(response: response!)
            }  else {
                if error != nil {
                    AppSingleton.sharedInstance().showAlert(kSomethingWentWrong, okTitle: "OK")
                } else {
                    self.presenter?.getUserProfileResponse(response: response!)
                }
            }
        }
    }
    
    func callBlockUserAPI(iBlockTo: String, tiIsBlocked: String) {
        LoaderView.sharedInstance.showLoader()
        UserAPI.blockUsers(nonce: authToken.nonce, timestamp: authToken.timeStamp, token: authToken.token, authorization: UserDataModel.authorization, iBlockTo: iBlockTo, tiIsBlocked: tiIsBlocked) { (response, error) in
            
            LoaderView.sharedInstance.hideLoader()
            if response?.responseCode == 200 {
                self.presenter?.getBlockUserResponse(response: response!)
            } else if response?.responseCode == 400 {
                self.presenter?.getBlockUserResponse(response: response!)
            }  else {
                if error != nil {
                    AppSingleton.sharedInstance().showAlert(kSomethingWentWrong, okTitle: "OK")
                } else {
                    self.presenter?.getBlockUserResponse(response: response!)
                }
            }
            
        }
    }
    
    func callBlockUserListAPI(){
        LoaderView.sharedInstance.showLoader()
        UserAPI.blockList(nonce: authToken.nonce, timestamp: authToken.timeStamp, token: authToken.token, authorization: UserDataModel.authorization) { (response, error) in
            
            LoaderView.sharedInstance.hideLoader()
            if response?.responseCode == 200 {
                self.presenter?.getBlockUserListResponse(response: response!)
            } else if response?.responseCode == 400 {
                self.presenter?.getBlockUserListResponse(response: response!)
            }  else {
                if error != nil {
                    AppSingleton.sharedInstance().showAlert(kSomethingWentWrong, okTitle: "OK")
                } else {
                    self.presenter?.getBlockUserListResponse(response: response!)
                }
            }
            
        }
    }
}
