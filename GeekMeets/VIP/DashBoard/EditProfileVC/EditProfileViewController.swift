//
//  EditProfileViewController.swift
//  GeekMeets
//
//  Created by SOTSYS124 on 22/04/20.
//  Copyright (c) 2020 SOTSYS203. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//

import UIKit

enum EditProfileListCells {
    
    case InformationCell
    case InterestCell
    case PhotosCell
    case SocialCell
    case PrivacyCell
    
    var cellHeight  : CGFloat {
        switch self {
            
        case .InformationCell, .InterestCell, .PhotosCell, .SocialCell, .PrivacyCell:
            return 50
            
        }
    }
    
    var cellRowHeight  : CGFloat {
        switch self {
            
        case .InformationCell:
            return 480
        case .InterestCell:
            return 225
        case .PhotosCell:
            return 390
        case .SocialCell:
            return 225
        case .PrivacyCell:
            return 230
        }
    }
    
    var headerHeight: CGFloat {
        return 45
    }
    
    var cellID: String {
        switch self {
            
        case .InformationCell:
            return "EditInformationCell"
        case .InterestCell:
            return "EditInterestCell"
        case .PhotosCell:
            return "EditPhotosCell"
        case .SocialCell:
            return "EditSocialLinkCell"
        case .PrivacyCell:
            return "EditProfilePrivacyCell"
            
        }
    }
    
    var sectionTitle: String {
        switch self {
        case .InformationCell:
            return "Edit Information"
        case .InterestCell:
            return "Interests & Preferences"
        case .PhotosCell:
            return "Photos"
        case .SocialCell:
            return "Social Media Links"
        case .PrivacyCell:
            return "Profile Privacy Settings (only for subscribers)"
        }
    }
}

struct EditProfileData {
  
  var cells: [EditProfileListCells] {
    var cell: [EditProfileListCells] = []
    
    cell.append(.InformationCell)
    cell.append(.InterestCell)
    cell.append(.PhotosCell)
    cell.append(.SocialCell)
    cell.append(.PrivacyCell)
    
    return cell
  }
}

protocol EditProfileProtocol: class {
}

class EditProfileViewController: UIViewController, EditProfileProtocol {
    //var interactor : EditProfileInteractorProtocol?
    var presenter : EditProfilePresentationProtocol?
    
     @IBOutlet weak var tblEditProfileView: UITableView!
    
    var objEditProfileData = EditProfileData()
    var imageArray = [#imageLiteral(resourceName: "img_intro_2"), #imageLiteral(resourceName: "image_1"), #imageLiteral(resourceName: "Image 63"), #imageLiteral(resourceName: "Image 62")]
    
    // MARK: Object lifecycle
    override init(nibName nibNameOrNil: String?, bundle nibBundleOrNil: Bundle?) {
        super.init(nibName: nibNameOrNil, bundle: nibBundleOrNil)
        setup()
    }
    
    required init?(coder aDecoder: NSCoder) {
        super.init(coder: aDecoder)
        setup()
    }
    
    // MARK: Setup
    
    private func setup() {
        let viewController = self
        let interactor = EditProfileInteractor()
        let presenter = EditProfilePresenter()
        
        //View Controller will communicate with only presenter
        viewController.presenter = presenter
        //viewController.interactor = interactor
        
        //Presenter will communicate with Interector and Viewcontroller
        presenter.viewController = viewController
        presenter.interactor = interactor
        
        //Interactor will communucate with only presenter.
        interactor.presenter = presenter
    }
    
    
    // MARK: View lifecycle
    
    override func viewDidLoad() {
        super.viewDidLoad()
    }

    
    @IBAction func btnBackAction(_ sender: UIButton) {
        self.popVC()
    }
}


extension EditProfileViewController : UITableViewDataSource, UITableViewDelegate {
    func numberOfSections(in tableView: UITableView) -> Int {
        return self.objEditProfileData.cells.count
    }
    
    func tableView(_ tableView: UITableView, numberOfRowsInSection section: Int) -> Int {
        return 1
    }
    
    func tableView(_ tableView: UITableView, cellForRowAt indexPath: IndexPath) -> UITableViewCell {
        let cell = tableView.dequeueReusableCell(withIdentifier: objEditProfileData.cells[indexPath.section].cellID)
        return cell!
    }
    
    func tableView(_ tableView: UITableView, willDisplay cell: UITableViewCell, forRowAt indexPath: IndexPath) {
        if objEditProfileData.cells[indexPath.section].cellID == "EditInformationCell" {
            
        } else if objEditProfileData.cells[indexPath.section].cellID == "EditInterestCell" {
            
        } else if objEditProfileData.cells[indexPath.section].cellID == "EditPhotosCell" {
            if let cell = cell as? EditPhotosCell  {
                
                cell.AddPhotosCollView.register(UINib.init(nibName: Cells.PhotoEmojiCell, bundle: Bundle.main), forCellWithReuseIdentifier: Cells.PhotoEmojiCell)
                
                let layout = CustomImageLayout()
                layout.scrollDirection = .horizontal
                cell.AddPhotosCollView.collectionViewLayout = layout
                
                cell.AddPhotosCollView.contentInset = UIEdgeInsets(top: 0, left: 0, bottom: 0, right: 0)
                cell.AddPhotosCollView.reloadData()
            }
        } else if objEditProfileData.cells[indexPath.section].cellID == "EditSocialLinkCell" {
            
        } else {
             if let cell = cell as? EditProfilePrivacyCell  {
                
                cell.clickOnBtnSwitch = { (index) in
                    print(indexPath.row)
                    if cell.btnSwichMode[index!].tag == 0 {
                        cell.btnSwichMode[0].isSelected = !cell.btnSwichMode[0].isSelected
                    } else if cell.btnSwichMode[index!].tag == 1 {
                        cell.btnSwichMode[1].isSelected = !cell.btnSwichMode[1].isSelected
                    } else if cell.btnSwichMode[index!].tag == 2 {
                        cell.btnSwichMode[2].isSelected = !cell.btnSwichMode[2].isSelected
                    } else {
                        cell.btnSwichMode[3].isSelected = !cell.btnSwichMode[3].isSelected
                    }
                }
            }
        }
    }
    
    func tableView(_ tableView: UITableView, heightForRowAt indexPath: IndexPath) -> CGFloat {
        return objEditProfileData.cells[indexPath.section].cellRowHeight
    }
    
    func tableView(_ tableView: UITableView, heightForHeaderInSection section: Int) -> CGFloat {
        return objEditProfileData.cells[section].cellHeight
    }
    
    func tableView(_ tableView: UITableView, viewForHeaderInSection section: Int) -> UIView? {
        let headerView:UIView =  UIView()
        headerView.backgroundColor = .white
        
        
        let headerTitle = UILabel()
        headerTitle.frame = CGRect(x: 20, y: headerView.frame.origin.y + 10, w: ScreenSize.width - 60, h: 30)
        headerTitle.text = objEditProfileData.cells[section].sectionTitle
        headerTitle.textColor = .black
        headerTitle.font = UIFont(name: "Poppins-SemiBold", size: 14)
        headerView.addSubview(headerTitle)
        
        return headerView
    }
}

extension EditProfileViewController : UICollectionViewDataSource, UICollectionViewDelegate, UICollectionViewDelegateFlowLayout {
    
    func numberOfSections(in collectionView: UICollectionView) -> Int {
        return 1
    }
    
    func collectionView(_ collectionView: UICollectionView, numberOfItemsInSection section: Int) -> Int {
        return self.imageArray != nil && self.imageArray.count != 0 ? self.imageArray.count + 1 : 0
    }
    
    func collectionView(_ collectionView: UICollectionView, cellForItemAt indexPath: IndexPath) -> UICollectionViewCell {
        let cell : PhotoEmojiCell = collectionView.dequeueReusableCell(withReuseIdentifier: Cells.PhotoEmojiCell, for: indexPath) as! PhotoEmojiCell
        
        cell.btnClose.alpha = 1.0
        if indexPath.row == 0 {
            cell.userImgView.image = #imageLiteral(resourceName: "icn_add_photo")
            cell.emojiStackView.alpha = 0
            return cell
        } else {
            cell.userImgView.image = imageArray[indexPath.row - 1]
            return cell
        }
    }

       func collectionView(_ collectionView: UICollectionView, layout collectionViewLayout: UICollectionViewLayout, sizeForItemAt indexPath: IndexPath) -> CGSize {
             let width = ScreenSize.width/3
             return CGSize(width: width, height: width)
     }
}
