//
//  EditProfileInteractor.swift
//  GeekMeets
//
//  Created by SOTSYS124 on 22/04/20.
//  Copyright (c) 2020 SOTSYS203. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//

import UIKit

protocol EditProfileInteractorProtocol {
    func uploadImgToS3(with obj: Dictionary<String, Any>, images : [NSDictionary])
    func callEdirProfileAPI(params : Dictionary<String, String>)
}

protocol EditProfileDataStore {
    //var name: String { get set }
}

class EditProfileInteractor: EditProfileInteractorProtocol, EditProfileDataStore {
    var presenter: EditProfilePresentationProtocol?
    //var name: String = ""
    
    var paramDetails : Dictionary<String, Any>!
    var thumbURlUpload: (path: String, name: String) {
        let folderName = user_Profile
        let timeStamp = Authentication.sharedInstance().GetCurrentTimeStamp()
        let imgExtension = ".jpeg"
        let path = "\(folderName)\(timeStamp)\(imgExtension)"
        return (path: path, name: "\(timeStamp)\(imgExtension)")
    }
    
    func uploadImgToS3(with obj: Dictionary<String, Any>, images : [NSDictionary]) {
        if images.count == 0 {
            _ = AppSingleton.sharedInstance().showAlert(kSelectUserProfile, okTitle: "OK")
            return
        }
        
        DispatchQueue.main.async {
            LoaderView.sharedInstance.showLoader()
        }
        var finalStr = ""
        self.paramDetails = obj
        
        for indexValue in 0..<images.count {
            let image = images[indexValue].value(forKey: "tiImage") as! UIImage
            let tiDefault = images[indexValue].value(forKey: "tiIsDefault") as! Int
            let imgName = images[indexValue].value(forKey: "vMedia") as! String
            let imgPath = images[indexValue].value(forKey: "vMediaPath") as! String
                    
            AWSHelper.setup()
            
            self.uploadSingleImg(image: image, path: imgPath, name: imgName) { (success, path) in
                if tiDefault == 1 {
                    self.paramDetails["vProfileImage"] = path.split("/").last!
                }
                
                let ustr = "{\"vMedia\":\"\(path.split("/").last!)\",\"tiMediaType\":\"1\",\"fHeight\":\"\(image.size.height)\",\"fWidth\":\"\(image.size.height)\",\"tiIsDefault\":\"\(tiDefault)\"}"
                finalStr = finalStr != "" ? "[\(finalStr),\(ustr)]" : images.count == 1 ? "[\(ustr)]" : ustr
                self.paramDetails["photos"] = finalStr
                print(finalStr)
                
                if finalStr.contains("[") {
                    DispatchQueue.main.async {
                        LoaderView.sharedInstance.hideLoader()
                    }
                    self.callEdirProfileAPI(params: self.paramDetails as! Dictionary<String, String>)
                }
            }
        }
    }
    
    func uploadSingleImg(image : UIImage, path: String, name: String, complete: @escaping (Bool, String) -> ()){
        AWSHelper.shared.upload(img: image, imgPath: path, imgName: name) { [weak self] (isUploaded, path, error) in

            guard let `self` = self else {return}
            if let err = error {
                print("ERROR : \(err.localizedDescription)")
                _ = AppSingleton.sharedInstance().showAlert(err.localizedDescription, okTitle: "OK")
            } else if isUploaded {
                complete(true, path!)
            } else {
                _ = AppSingleton.sharedInstance().showAlert(kSomethingWentWrong, okTitle: "OK")
            }
        }
    }
    
    // MARK: Do something
    func callEdirProfileAPI(params : Dictionary<String, String>) {
        DispatchQueue.main.async {
            LoaderView.sharedInstance.showLoader()
        }
        UserAPI.editProfile(nonce: authToken.nonce, timestamp: authToken.timeStamp, token: authToken.token, authorization: UserDataModel.authorization, vName: params["vName"]!, dDob: params["dDob"]!, tiAge: params["tiAge"]!, tiGender: UserAPI.TiGender_editProfile(rawValue: params["tiGender"]!)!, txCompanyDetail: params["txCompanyDetail"]!, txAbout: params["txAbout"]!, vEmail: params["vEmail"]!, vProfileImage: params["vProfileImage"]!, vLiveIn: params["vLiveIn"]!, deletephotos : params["deletephotos"]!, photos: params["photos"]!, vInstaLink: params["vInstaLink"]!, vSnapLink: params["vSnapLink"]!, vFbLink: params["vFbLink"]!, tiIsShowAge: UserAPI.TiIsShowAge_editProfile(rawValue: params["tiIsShowAge"]!)!, tiIsShowDistance: UserAPI.TiIsShowDistance_editProfile(rawValue: params["tiIsShowDistance"]!), tiIsShowContactNumber: UserAPI.TiIsShowContactNumber_editProfile(rawValue: params["tiIsShowContactNumber"]!)!, tiIsShowProfileToLikedUser: UserAPI.TiIsShowProfileToLikedUser_editProfile(rawValue: params["tiIsShowProfileToLikedUser"]!)!) { (response, error) in
            DispatchQueue.main.async {
                LoaderView.sharedInstance.hideLoader()
            }
            if response?.responseCode == 200 {
                self.presenter?.getEditProfileResponse(response: response!)
            } else if response?.responseCode == 203 {
                AppSingleton.sharedInstance().logout()
                AppSingleton.sharedInstance().showAlert(kLoogedIntoOtherDevice, okTitle: "OK")
            }  else {
                if error != nil {
                    AppSingleton.sharedInstance().showAlert(kSomethingWentWrong, okTitle: "OK")
                } else {
                    AppSingleton.sharedInstance().showAlert((response?.responseMessage!)!, okTitle: "OK")
                }
            }
        }
    }
}
