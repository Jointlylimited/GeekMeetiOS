//
//  SelectAgeRangeViewController.swift
//  GeekMeets
//
//  Created by SOTSYS216 on 23/04/20.
//  Copyright (c) 2020 SOTSYS203. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//

import UIKit

protocol SelectAgeRangeProtocol: class {
//    func displayQuesionsData(Data : [NSDictionary])
    func displayPreferenceData(response : PreferencesResponse)
}

struct QuestionaryModel {
    var arrQuestionnaire:[NSDictionary]!
    var objQuestionnaire:QuestionnaireModel!
}

struct PrefrenceModel {
    var arrPrefrenceData:[PreferencesField]!
    var objPrefrence:PreferencesField!
}
class SelectAgeRangeViewController: UIViewController, SelectAgeRangeProtocol {
    
    
    //var interactor : SelectAgeRangeInteractorProtocol?
    var presenter : SelectAgeRangePresentationProtocol?
    
    @IBOutlet weak var lblQuestionIndex: UILabel!
    @IBOutlet weak var lblTitle: UILabel!
    @IBOutlet weak var lblDescription: UILabel!
    @IBOutlet weak var clnSelectAge: UICollectionView!
    @IBOutlet weak var txtChooseHeight: UITextField!
    @IBOutlet weak var heightPickerView: UIView!
    @IBOutlet weak var heightPicker: UIDatePicker!
    @IBOutlet weak var HeightSliderView: UIView!
    @IBOutlet weak var lblMinHeight: UILabel!
    @IBOutlet weak var lblMaxHeight: UILabel!
    @IBOutlet weak var heightSlider: UISlider!
    
    var objQuestionModel = QuestionaryModel()
    var objPreModel = PrefrenceModel()
    var intAgeSelected:Int = 0
    var index : Int = 0
    var selectedCells = [Int]()
    var selectedCellValues = [String]()
    var isFromSignUp : Bool = true
    var interest_delegate : SelectInterestAgeGenderDelegate!
    fileprivate let gregorian = Calendar(identifier: .gregorian)
    
    // MARK: Object lifecycle
    override init(nibName nibNameOrNil: String?, bundle nibBundleOrNil: Bundle?) {
        super.init(nibName: nibNameOrNil, bundle: nibBundleOrNil)
        setup()
    }
    
    required init?(coder aDecoder: NSCoder) {
        super.init(coder: aDecoder)
        setup()
    }
    
    // MARK: Setup
    
    private func setup() {
        let viewController = self
        let interactor = SelectAgeRangeInteractor()
        let presenter = SelectAgeRangePresenter()
        
        //View Controller will communicate with only presenter
        viewController.presenter = presenter
        //viewController.interactor = interactor
        
        //Presenter will communicate with Interector and Viewcontroller
        presenter.viewController = viewController
        presenter.interactor = interactor
        
        //Interactor will communucate with only presenter.
        interactor.presenter = presenter
    }
    
    
    // MARK: View lifecycle
    
    override func viewDidLoad() {
        super.viewDidLoad()
        doSomething()
    }
    
    func doSomething() {
        self.navigationController?.setNavigationBarHidden(true, animated: true)
        self.navigationController?.isNavigationBarHidden = true
        self.presenter?.callQuestionaryAPI()
    }

    func setHeightPickerData(){
        
        heightSlider.minimumValue = 0
        heightSlider.maximumValue = 10
        
        heightSlider.addTarget(self, action: #selector(changeVlaue(_:)), for: .valueChanged)
//        heightSlider.setThumbImage(#imageLiteral(resourceName: "icn_rect_1"), for: .normal)
//        heightSlider.transform = CGAffineTransform(rotationAngle: CGFloat(Double.pi))
        
        let imgView = UIImageView(frame: CGRect(x: heightSlider.frame.x, y: heightSlider.frame.y - heightSlider.frame.height/2 - 10, w: heightSlider.frame.height, h: heightSlider.frame.height))
        imgView.image = #imageLiteral(resourceName: "icn_rect_1")
        imgView.addPinchGesture(target: self, action: #selector(changeVlaue(_:)))
        heightSlider.addSubview(imgView)
        
        let imgView2 = UIImageView(frame: CGRect(x: heightSlider.frame.width - heightSlider.frame.height/2, y: heightSlider.frame.y - heightSlider.frame.height/2 - 10, w: heightSlider.frame.height, h: heightSlider.frame.height))
        imgView2.image = #imageLiteral(resourceName: "icn_rect_1")
        imgView2.addPinchGesture(target: self, action: #selector(changeVlaue(_:)))
        heightSlider.addSubview(imgView2)
    }
    func displayPreferenceData(response : PreferencesResponse) {
        
        self.objPreModel.arrPrefrenceData = response.responseData
        if isFromSignUp {
            self.objPreModel.objPrefrence = self.objPreModel.arrPrefrenceData[self.index]
            self.lblTitle.text = "\(self.objPreModel.arrPrefrenceData[self.index].txPreference!)"
            self.index = self.index + 1
            self.lblQuestionIndex.text = "\(self.index)/\(self.objPreModel.arrPrefrenceData.count)"
            setPreferenceData(index: self.index)
        } else {
            setPreferenceData(index: self.index)
        }
        self.selectedCells = []
        self.selectedCellValues = []
        self.clnSelectAge.reloadData()
    }
    
    func setPreferenceData(index : Int){
        self.objPreModel.objPrefrence = self.objPreModel.arrPrefrenceData[self.index - 1]
        self.lblQuestionIndex.text = "\(self.index)/\(self.objPreModel.arrPrefrenceData.count)"
        self.lblTitle.text = "\(self.objPreModel.objPrefrence.txPreference!)"
        if self.objPreModel.objPrefrence.tiPreferenceType == 0 {
//            self.lblDescription.isHidden = true
            
        }else{
            self.lblDescription.isHidden = false
//            self.lblDescription.text = "\(self.objPreModel.objPrefrence.txPreference!)"
        }
        if index == 5 || index == 6 {
            setHeightPickerData()
            self.txtChooseHeight.alpha = 1
            self.HeightSliderView.alpha = 1
            self.clnSelectAge.alpha = 0
        } else {
            self.txtChooseHeight.alpha = 0
            self.HeightSliderView.alpha = 0
            self.clnSelectAge.alpha = 1
        }
        self.selectedCells = []
        self.selectedCellValues = []
        self.clnSelectAge.reloadData()
    }
    
    @objc func changeVlaue(_ sender: UISlider) {
        let value = CGFloat(sender.value)
        print("value is" ,value)
         self.lblMinHeight.text = "\(sender.minimumValue)"
        self.lblMaxHeight.text = "\(sender.maximumValue)"
    }
    
    //MARK: IBAction Method
    @IBAction func actionContinues(_ sender: Any) {
        
        if isFromSignUp {
            if self.index < self.objPreModel.arrPrefrenceData.count /*self.objQuestionModel.arrQuestionnaire.count*/ {
                self.index = index + 1
                self.setPreferenceData(index: self.index)
            } else {
                self.presenter?.actionContinue()
            }
        } else {
            let data = self.selectedCellValues.map { String($0) }
            .joined(separator: ", ")
            self.interest_delegate.getSelectedValue(index : self.index, data: data)
            self.popVC()
        }
    }
    
    @IBAction func actionSkip(_ sender: Any) {
        if isFromSignUp {
            if self.index < self.objPreModel.arrPrefrenceData.count /* self.objQuestionModel.arrQuestionnaire.count*/ {
                self.index = index + 1
                self.setPreferenceData(index: self.index)
            } else {
                self.presenter?.actionContinue()
            }
        } else {
            self.popVC()
        }
    }
    @IBAction func btnSelectHeightAction(_ sender: UIBarButtonItem) {
        self.heightPickerView.alpha = 0
        let dateFormatter2 = DateFormatter()
        dateFormatter2.dateFormat = "HH:mm"
        let utcTimeFormat = dateFormatter2.string(from: heightPicker.date)
        print(utcTimeFormat)
        self.txtChooseHeight.text = utcTimeFormat
        
    }
}

//MARK:UICollectionview

extension SelectAgeRangeViewController: UICollectionViewDelegate, UICollectionViewDataSource, UICollectionViewDelegateFlowLayout,SelectAgeDelegate
{
    
    func collectionView(_ collectionView: UICollectionView, numberOfItemsInSection section: Int) -> Int {
        return self.objPreModel.objPrefrence != nil ? self.objPreModel.objPrefrence.preferenceOption!.count : 0 //self.objQuestionModel.objQuestionnaire.response_set!.response_option?.count ?? 0
    }
    
    func collectionView(_ collectionView: UICollectionView, cellForItemAt indexPath: IndexPath) -> UICollectionViewCell
    {
        let cell : SelectAgeCell = collectionView.dequeueReusableCell(withReuseIdentifier: "SelectAgeCell", for: indexPath) as! SelectAgeCell
        cell.delegate = self
        return cell
    }
    
    func collectionView(_ collectionView: UICollectionView, willDisplay cell: UICollectionViewCell, forItemAt indexPath: IndexPath) {
        if let cell = cell as? SelectAgeCell {
            cell.indexPath = indexPath
            let name = self.objPreModel.objPrefrence.preferenceOption![indexPath.row].vOption //self.objQuestionModel.objQuestionnaire.response_set?.response_option?[indexPath.row].name!
            cell.lblTitle.text = name
            
            if self.selectedCells.contains(indexPath.row) {
                cell.btnSelectAge.layer.borderColor = #colorLiteral(red: 0.7098039216, green: 0.3254901961, blue: 0.8941176471, alpha: 1)
                cell.btnSelectAge.setTitleColor(#colorLiteral(red: 0.7098039216, green: 0.3254901961, blue: 0.8941176471, alpha: 1), for: .normal)
                cell.lblTitle.textColor = #colorLiteral(red: 0.7098039216, green: 0.3254901961, blue: 0.8941176471, alpha: 1)
            } else {
                cell.btnSelectAge.layer.borderColor = #colorLiteral(red: 0, green: 0, blue: 0, alpha: 0.5)
                cell.btnSelectAge.setTitleColor(#colorLiteral(red: 0, green: 0, blue: 0, alpha: 0.5), for: .normal)
                cell.lblTitle.textColor = #colorLiteral(red: 0, green: 0, blue: 0, alpha: 0.5)
            }
            
            cell.clickOnCell = {
                if self.objPreModel.objPrefrence.tiPreferenceType == 0 {
                    if self.selectedCells.count != 0 {
                        let index = self.selectedCells.firstIndex { (index) -> Bool in
                            return index == indexPath.row
                        }
                        if self.selectedCells.contains(indexPath.row) {
                            self.selectedCells.remove(at: index!)
                            self.selectedCellValues.remove(at: index!)
                        } else {
                            self.selectedCells.removeAll()
                            self.selectedCellValues.removeAll()
                            if self.selectedCells.count == 0 {
                                self.selectedCells.append(indexPath.row)
                                self.selectedCellValues.append(name!)
                            }
                        }
                    } else {
                        if self.selectedCells.count == 0 {
                            self.selectedCells.append(indexPath.row)
                            self.selectedCellValues.append(name!)
                        }
                    }
                } else {
                    if self.selectedCells.contains(indexPath.row) {
                        let index = self.selectedCells.firstIndex { (index) -> Bool in
                            return index == indexPath.row
                        }
                        self.selectedCells.remove(at: index!)
                        self.selectedCellValues.remove(at: index!)
                    } else {
                        self.selectedCells.append(indexPath.row)
                        self.selectedCellValues.append(name!)
                    }
                }
                self.clnSelectAge.reloadData()
            }
        }
    }
    func collectionView(_ collectionView: UICollectionView, layout collectionViewLayout: UICollectionViewLayout, sizeForItemAt indexPath: IndexPath) -> CGSize {
        let name = self.objPreModel.objPrefrence.preferenceOption![indexPath.row].vOption
        let yourWidth = collectionView.bounds.width/3.0
        let yourHeight = CGFloat(50)
        let size = (name! as NSString).size(withAttributes: [
            NSAttributedString.Key.font : UIFont(name: FontTypePoppins.Poppins_Medium.rawValue, size: FontSizePoppins.sizePopupMenuTitle.rawValue)!
        ])
        
        if size.width > yourWidth {
            return CGSize(width: size.width, height: yourHeight)
        } else {
            return CGSize(width: yourWidth, height: yourHeight)
        }
    }
    func collectionView(_ collectionView: UICollectionView, layout collectionViewLayout: UICollectionViewLayout, insetForSectionAt section: Int) -> UIEdgeInsets {
        return UIEdgeInsets.zero
    }
    
    func collectionView(_ collectionView: UICollectionView, layout collectionViewLayout: UICollectionViewLayout, minimumInteritemSpacingForSectionAt section: Int) -> CGFloat {
        
        return 0
        
    }
    
    func collectionView(_ collectionView: UICollectionView, layout collectionViewLayout: UICollectionViewLayout, minimumLineSpacingForSectionAt section: Int) -> CGFloat {
        return 0
    }
    
    func actionSelectAge(at index:IndexPath){
        intAgeSelected = index.row
        clnSelectAge.reloadData()
    }
}

extension SelectAgeRangeViewController : UITextFieldDelegate {
    func textFieldDidBeginEditing(_ textField: UITextField) {
        self.HeightSliderView.alpha = 0
    }
}
