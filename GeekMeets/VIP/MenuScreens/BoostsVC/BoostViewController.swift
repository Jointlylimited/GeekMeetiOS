//
//  BoostViewController.swift
//  GeekMeets
//
//  Created by SOTSYS124 on 22/04/20.
//  Copyright (c) 2020 SOTSYS203. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//

import UIKit

struct PlanData {
    var days = String()
    var duration = String()
    var price = String()
    var planType = String()
    var BoostGeekCount = String()
    var GeekCount = String()
}

protocol BoostProtocol: class {
    func getBoostPlansResponse(response : BoostGeekResponse)
    func getBoostResponse(response : BoostGeekResponse)
    func getActiveBoostResponse(response : BoostGeekResponse)
}

class BoostViewController: UIViewController, BoostProtocol {
    //var interactor : BoostInteractorProtocol?
    var presenter : BoostPresentationProtocol?
    
    @IBOutlet var btnBoostColl: [UIButton]!
    @IBOutlet weak var scrollView: UIScrollView!
    @IBOutlet weak var btnActiveBoostPlans: UIButton!
    @IBOutlet weak var lblRemainingTime: UILabel!
    @IBOutlet weak var btnBoostNow: UIButton!
    @IBOutlet var btnViews: [UIView]!
    @IBOutlet weak var bgViewHeightConstant: NSLayoutConstraint!
    @IBOutlet weak var PlanCollectionView: UICollectionView!
    @IBOutlet weak var pageControl: UIPageControl!
    
    var planDict : NSDictionary = [:]
    var timer = Timer()
    var totalDay : Int!
    var totalHour : Int!
    var totalMin : Int!
    var totalSecond : Int!
    var PlanDetailsArray : [PlanData] = []
    var selectedIndex : Int = 0
    
     // MARK: Object lifecycle
    override init(nibName nibNameOrNil: String?, bundle nibBundleOrNil: Bundle?) {
        super.init(nibName: nibNameOrNil, bundle: nibBundleOrNil)
        setup()
    }
    
    required init?(coder aDecoder: NSCoder) {
        super.init(coder: aDecoder)
        setup()
    }
    
    // MARK: Setup
    private func setup() {
        let viewController = self
        let interactor = BoostInteractor()
        let presenter = BoostPresenter()
        
        //View Controller will communicate with only presenter
        viewController.presenter = presenter
        //viewController.interactor = interactor
        
        //Presenter will communicate with Interector and Viewcontroller
        presenter.viewController = viewController
        presenter.interactor = interactor
        
        //Interactor will communucate with only presenter.
        interactor.presenter = presenter
    }
    
    // MARK: View lifecycle
    override func viewDidLoad() {
        super.viewDidLoad()
        setCollectionView()
        self.bgViewHeightConstant.constant = DeviceType.hasNotch || DeviceType.iPhone11 || DeviceType.iPhone11or11Pro ? 230 : 180
        self.presenter?.callBoostPlansAPI()
    }

    func setCollectionView(){
        
        self.PlanDetailsArray = [PlanData(days: "", duration: "", price: "", planType: "", BoostGeekCount: "", GeekCount: ""), PlanData(days: "1", duration: "Boost", price: "$1.99", planType: "1", BoostGeekCount: "1", GeekCount: "0"), PlanData(days: "5", duration: "Boosts", price: "$3.99", planType: "1", BoostGeekCount: "5", GeekCount: "0"),  PlanData(days: "10 + 10", duration: "Boosts", price: "$14.99", planType: "3", BoostGeekCount: "10", GeekCount: "10"), PlanData(days: "", duration: "", price: "", planType: "", BoostGeekCount: "", GeekCount: "")]
        //PlanData(days: "8", duration: "Boosts", price: "$6.99", planType: "1", BoostGeekCount: "8", GeekCount: "0"),
        self.PlanCollectionView.register(UINib.init(nibName: Cells.PlanCollectionCell, bundle: Bundle.main), forCellWithReuseIdentifier: Cells.PlanCollectionCell)
         self.PlanCollectionView.contentInset = UIEdgeInsets(top: 10, left: 30, bottom: 10, right: 30)
        
        let layout = UICollectionViewFlowLayout()// CustomImageLayout()
        layout.scrollDirection = .horizontal
        layout.minimumInteritemSpacing = 15
        self.PlanCollectionView.collectionViewLayout = layout
        
        self.PlanCollectionView.reloadData()
        
        self.pageControl.numberOfPages = self.PlanDetailsArray.count - 2
    }
    
    @IBAction func btnBackAction(_ sender: UIButton) {
        self.dismissVC(completion: nil)
    }
    
    @IBAction func btnContinueAction(_ sender: UIButton) {
        if planDict != [:] {
            self.callCreateBoostAPI()
        } else {
            AppSingleton.sharedInstance().showAlert("Please select plan", okTitle: "OK")
        }
    }
    
    @IBAction func btnBoostNowAction(_ sender: UIButton) {
        self.callActiveBoostAPI()
    }
    
    @IBAction func btnBoostAction(_ sender: UIButton) {
        
        btnBoostColl.forEach{
            $0.isSelected = false
        }
        sender.isSelected = true
        resetButtonView()
        btnViews[sender.tag].backgroundColor = .lightGray
        
        if sender.tag == 0 {
            planDict = ["fPlanPrice" : "1.99", "tiPlanType": "1", "iBoostGeekCount" : "1", "iGeekCount" : "0"]
        } else if sender.tag == 1 {
            planDict = ["fPlanPrice" : "3.99",  "tiPlanType": "1", "iBoostGeekCount" : "5", "iGeekCount" : "0"]
        } else if sender.tag == 2 {
            planDict = ["fPlanPrice" : "6.99", "tiPlanType": "1", "iBoostGeekCount" : "8", "iGeekCount" : "0"]
        } else {
            planDict = ["fPlanPrice" : "14.99", "tiPlanType": "3", "iBoostGeekCount" : "10", "iGeekCount" : "10"]
        }
    }
    
    func startTimer() {
      timer = Timer.scheduledTimer(timeInterval: 1, target: self, selector: #selector(updateTime), userInfo: nil, repeats: true)
    }
    
    @objc func updateTime() {
      
      if totalSecond != nil || totalMin != nil {
        if totalSecond != 0 {
          totalSecond -= 1
        }
        
        if "\(totalSecond!)".firstCharacterAsString == "0" {
         totalSecond = 60
          totalMin -= 1
        }

        if "\(totalMin!)".firstCharacterAsString == "0" {
         // totalMin = 60
          totalHour -= 1
        }
        self.lblRemainingTime.text = "\(totalMin!):\(totalSecond!) Remaining"
        
        if totalMin! == 0 && totalSecond! == 0 {
            totalMin = 0
            totalSecond = 0
          endTimer()
          self.lblRemainingTime.text = "\(00):\(00) Remaining"
        }
      } else {
        endTimer()
        self.lblRemainingTime.text = "\(00):\(00) Remaining"
      }
    }
    
    func endTimer() {
      timer.invalidate()
    }
    
    func resetButtonView(){
        btnViews.forEach {
            $0.backgroundColor = .white
        }
    }
    
    func setPlansDetails(date : String){
        let Dateformatter = DateFormatter()
        Dateformatter.dateFormat = "yyyy-MM-dd HH:mm:ss"
        
        let myTimeInterval = TimeInterval(Int((date))!)
        let date1 = Date(timeIntervalSince1970: TimeInterval(myTimeInterval))
        
        let dateStr1 = Dateformatter.string(from: date1)
        let dateStr2 = Dateformatter.string(from: Date())
        
        if dateStr1 != "" {
            (totalHour, totalMin, totalSecond) = timeGapBetweenDates(previousDate: dateStr1, currentDate: dateStr2)
        }
        if dateStr1.compare(dateStr2) == .orderedDescending {
            startTimer()
        } else {
        }
    }
    
    func setBoostNowButton(data : BoostGeekFields){
        if data.pendingBoost != 0 && data.iExpireAt == "" {
            self.btnBoostNow.alpha = 1.0
            self.btnBoostNow.isUserInteractionEnabled = true
        } else {
            self.btnBoostNow.alpha = 0.5
            self.btnBoostNow.isUserInteractionEnabled = false
            if data.iExpireAt != "" {
                setPlansDetails(date: (data.iExpireAt)!)
            }
        }
    }
}

extension BoostViewController {
    func getBoostPlansResponse(response : BoostGeekResponse){
        print(response)
        if response.responseCode == 200 {
            self.btnActiveBoostPlans.setTitle("\(response.responseData?.pendingBoost ?? 0)", for: .normal)
            if response.responseData?.tiPlanType == 1 || response.responseData?.tiPlanType == 3 {
                setBoostNowButton(data : response.responseData!)
            }
        }
    }
    
    func callCreateBoostAPI() {
        let param = RequestParameter.sharedInstance().createBoostGeekParams(fPlanPrice: planDict["fPlanPrice"] as! String, tiPlanType: planDict["tiPlanType"] as! String, iBoostCount: planDict["iBoostGeekCount"] as! String, iGeekCount: planDict["iGeekCount"] as! String)
        self.presenter?.callCreateBoostAPI(param : param)
    }
    
    func getBoostResponse(response : BoostGeekResponse){
        if response.responseCode == 200 {
            resetButtonView()
            AppSingleton.sharedInstance().showAlert(kSuccessPurBoostPlan, okTitle: "OK")
            self.presenter?.callBoostPlansAPI()
        } else {
            AppSingleton.sharedInstance().showAlert(response.responseMessage!, okTitle: "OK")
        }
    }
    
    func callActiveBoostAPI(){
        self.presenter?.callActiveBoostAPI()
    }
    
    func getActiveBoostResponse(response : BoostGeekResponse){
        print(response)
        if response.responseCode == 200 {
            resetButtonView()
            self.presenter?.callBoostPlansAPI()
        } else {
            AppSingleton.sharedInstance().showAlert(response.responseMessage!, okTitle: "OK")
        }
    }
}

//MARK: UICollectionview Delegate & Datasource Methods
extension BoostViewController : UICollectionViewDataSource, UICollectionViewDelegate, UICollectionViewDelegateFlowLayout {
    func numberOfSections(in collectionView: UICollectionView) -> Int {
        return 1
    }
    
    func collectionView(_ collectionView: UICollectionView, numberOfItemsInSection section: Int) -> Int {
        return self.PlanDetailsArray.count != 0 ? self.PlanDetailsArray.count : 0
    }
    
    func collectionView(_ collectionView: UICollectionView, cellForItemAt indexPath: IndexPath) -> UICollectionViewCell {
        let cell : PlanCollectionCell = collectionView.dequeueReusableCell(withReuseIdentifier: Cells.PlanCollectionCell, for: indexPath) as! PlanCollectionCell
        let data = self.PlanDetailsArray[indexPath.row]
        let dataIndex = indexPath.row == 1 || indexPath.row == 2 || indexPath.row == 3
        cell.lblPlanCount.text = data.days
        cell.lblduration.text = data.duration
        cell.lblPrice.text = data.price
        cell.btnPopular.alpha = 0.0
        cell.cellView.borderColor = dataIndex ? #colorLiteral(red: 0.6000000238, green: 0.6000000238, blue: 0.6000000238, alpha: 1) : .clear
        cell.lblPlanCount.textColor = #colorLiteral(red: 0.6000000238, green: 0.6000000238, blue: 0.6000000238, alpha: 1)
        cell.lblPrice.textColor = #colorLiteral(red: 0.6000000238, green: 0.6000000238, blue: 0.6000000238, alpha: 1)
        
        if indexPath.row == selectedIndex {
            cell.cellView.borderColor = dataIndex ? #colorLiteral(red: 0.5791940689, green: 0.1280144453, blue: 0.5726861358, alpha: 1) : .clear
            cell.lblPlanCount.textColor = #colorLiteral(red: 0, green: 0, blue: 0, alpha: 1)
            cell.lblPrice.textColor = #colorLiteral(red: 0, green: 0, blue: 0, alpha: 1)
            planDict = ["fPlanPrice" : data.price.split("$").last!, "tiPlanType": data.planType, "iBoostGeekCount" : data.BoostGeekCount, "iGeekCount" : data.GeekCount]
        }
        
        if indexPath.row == 3 {
            cell.btnPopular.alpha = 1.0
        }
        return cell
    }
    
    
    func collectionView(_ collectionView: UICollectionView, layout collectionViewLayout: UICollectionViewLayout, sizeForItemAt indexPath: IndexPath) -> CGSize {
        let height = collectionView.frame.height
        
        if indexPath.row == selectedIndex {
            return CGSize(width: DeviceType.iPhone5orSE ? 125 : 135, height: height - 80)
        } else {
            return CGSize(width: DeviceType.iPhone5orSE ? 110 : 120, height: height - 100)
        }
    }
    
    func collectionView(_ collectionView: UICollectionView, didSelectItemAt indexPath: IndexPath) {
        let dataIndex = indexPath.row == 1 || indexPath.row == 2 || indexPath.row == 3
        self.selectedIndex = dataIndex ? indexPath.row : 1
        self.pageControl.currentPage = self.selectedIndex - 1
        PlanCollectionView.scrollToItem(at: indexPath, at: .centeredHorizontally, animated: true)
        self.PlanCollectionView.reloadData()
    }
    
    func scrollViewDidScroll(_ scrollView: UIScrollView) {
        // Parallax visible cells
        let center = CGPoint(x: scrollView.contentOffset.x + (scrollView.frame.width / 2), y: (scrollView.frame.height / 2))
        if let ip = PlanCollectionView.indexPathForItem(at: center) {
            let dataIndex = ip.row == 1 || ip.row == 2 || ip.row == 3
            self.selectedIndex = dataIndex ? ip.row : 1
            self.pageControl.currentPage = self.selectedIndex - 1
            self.PlanCollectionView.reloadData()
        }
    }
}
