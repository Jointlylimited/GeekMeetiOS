//
//  EditPreferenceInteractor.swift
//  GeekMeets
//
//  Created by SOTSYS124 on 27/05/20.
//  Copyright (c) 2020 SOTSYS203. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//

import UIKit

protocol EditPreferenceInteractorProtocol {
    func callCreatePreferenceAPI(params : Dictionary<String, String>)
    func callQuestionaryAPI()
}

protocol EditPreferenceDataStore {
    //var name: String { get set }
}

class EditPreferenceInteractor: EditPreferenceInteractorProtocol, EditPreferenceDataStore {
    var presenter: EditPreferencePresentationProtocol?
    //var name: String = ""
    
    // MARK: Do something
    func callCreatePreferenceAPI(params : Dictionary<String, String>){
        if params["tiPreferenceType"]! == 1 {
//            LoaderView.sharedInstance.showLoader()
            PreferencesAPI.update(nonce: authToken.nonce, timestamp: Int(authToken.timeStamps)!, token: authToken.token, language: APPLANGUAGE.english, authorization: UserDataModel.authorization, tiPreferenceType: params["tiPreferenceType"]!, iPreferenceId: params["iPreferenceId"]!, iOptionId: params["iOptionId"]!, tiIsHide: params["tiIsHide"]!) { (response, error) in
                
//                delay(0.2) {
//                    LoaderView.sharedInstance.hideLoader()
//                }
                if response?.responseCode == 200 {
                    self.presenter?.getPostPreferenceResponse(response : response!)
                } else if response?.responseCode == 203 {
                    AppSingleton.sharedInstance().logout()
                    AppSingleton.sharedInstance().showAlert((response?.responseMessage!)!, okTitle: "OK")
                } else {
                    if error != nil {
                        AppSingleton.sharedInstance().showAlert(kSomethingWentWrong, okTitle: "OK")
                    } else {
                        AppSingleton.sharedInstance().showAlert((response?.responseMessage!)!, okTitle: "OK")
                    }
                }
            }
        } else {
//            LoaderView.sharedInstance.showLoader()
            PreferencesAPI.update(nonce: authToken.nonce, timestamp: Int(authToken.timeStamps)!, token: authToken.token, language: APPLANGUAGE.english, authorization: UserDataModel.authorization, tiPreferenceType: params["tiPreferenceType"]!, iPreferenceId: params["iPreferenceId"]!, iAnswerId: params["iAnswerId"]!, iOptionId: params["iOptionId"]!, tiIsHide: params["tiIsHide"]!) { (response, error) in
                
//                delay(0.2) {
//                    LoaderView.sharedInstance.hideLoader()
//                }
                if response?.responseCode == 200 {
                    self.presenter?.getPostPreferenceResponse(response : response!)
                } else if response?.responseCode == 203 {
                    AppSingleton.sharedInstance().logout()
                    AppSingleton.sharedInstance().showAlert((response?.responseMessage!)!, okTitle: "OK")
                } else {
                    if error != nil {
                        AppSingleton.sharedInstance().showAlert(kSomethingWentWrong, okTitle: "OK")
                    } else {
                        AppSingleton.sharedInstance().showAlert((response?.responseMessage!)!, okTitle: "OK")
                    }
                }
            }
        }
    }
    
    func callQuestionaryAPI() {
        DefaultLoaderView.sharedInstance.showLoader()
        PreferencesAPI.list(nonce: authToken.nonce, timestamp: Int(authToken.timeStamps)!, token: authToken.token, language: APPLANGUAGE.english, authorization: UserDataModel.authorization) { (response, error) in
            
            delay(0.2) {
                DefaultLoaderView.sharedInstance.hideLoader()
            }
            if response?.responseCode == 200 {
                self.presenter?.getQuestionaryResponse(response : response!)
            } else if response?.responseCode == 203 {
                AppSingleton.sharedInstance().logout()
                AppSingleton.sharedInstance().showAlert((response?.responseMessage!)!, okTitle: "OK")
            } else {
                if error != nil {
                    AppSingleton.sharedInstance().showAlert(kSomethingWentWrong, okTitle: "OK")
                } else {
                    AppSingleton.sharedInstance().showAlert((response?.responseMessage!)!, okTitle: "OK")
                }
            }
            
        }
    }
}
