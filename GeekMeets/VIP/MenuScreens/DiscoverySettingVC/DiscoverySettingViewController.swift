//
//  DiscoverySettingViewController.swift
//  GeekMeets
//
//  Created by SOTSYS124 on 23/04/20.
//  Copyright (c) 2020 SOTSYS203. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//

import UIKit

enum Interest_PreferenceData {

    case Ethernity
    case Preference_Ethernity
    case Personality
    case Preference_Personality
    case Height
    case Preference_Height
    case SexualOrientation
    case Preference_SexualOrientation
    case LookingFor
    case AgeRange
    case Region
    case BodyType
    case Preference_BodyType
    case TurnsMost
    case Communication
    case Important
    case Accountable
    case Indoor_Outdoor
    case Sex_Important
    case Morning_Night
    case Pets
    case Kids
    case Decision_Making
    
    var Title : String {
        switch self {
        case .Ethernity:
            return "Your Ethnicity?"
        case .Preference_Ethernity:
            return "Your desired partnerâ€™s Ethnicity would be?"
        case .Personality:
            return "What is your personality type?"
        case .Preference_Personality:
            return "Personality of your desired partner would be?"
        case .Height:
            return "Your Height?"
        case .Preference_Height:
            return "Your Height preference?"
        case .SexualOrientation:
            return "Your Sexual orientation?"
        case .Preference_SexualOrientation:
            return "Sexual Orientation of your desired partner"
        case .LookingFor:
            return "Are you looking for.."
        case .AgeRange:
            return "Select age range of your preferred partner?"
        case .Region:
            return "What is your religion?"
        case .BodyType:
            return "Your Body Type?"
        case .Preference_BodyType:
            return "Body type of your desired partner?"
        case .TurnsMost:
            return "What turns you on the most?"
        case .Communication:
            return "How important is communication in a relationship?"
        case .Important:
            return "Which is more important?"
        case .Accountable:
            return "It is important to be accountable in a relationship?"
        case .Indoor_Outdoor:
            return "Are you A indoors or outdoors person?"
        case .Sex_Important:
            return "How important is the element of sex in a relationship?"
        case .Morning_Night:
            return "Are you a morning or night person?"
        case .Pets:
            return "Do you have pets?"
        case .Kids:
            return "Do you have Kids?"
        case .Decision_Making:
            return "How Important is decision making as a couple?"
        }
    }
}

class CommonCellModel {
    var title: String
    var description: String?
    var isDescAvailable : Bool = false
    
    init(title: String, description: String, isDescAvailable : Bool = false) {
        self.title = title
        self.description = description
        self.isDescAvailable = isDescAvailable
    }
}

protocol DiscoverySettingProtocol: class {
}

class DiscoverySettingViewController: UIViewController, DiscoverySettingProtocol {
    //var interactor : DiscoverySettingInteractorProtocol?
    var presenter : DiscoverySettingPresentationProtocol?
    
    @IBOutlet weak var tblDiscoverList: UITableView!
    @IBOutlet weak var lblTitle: UILabel!
    @IBOutlet weak var viewHeightConstant: NSLayoutConstraint!
    @IBOutlet weak var btnChange: GradientButton!
    
    var isFromMenu : Bool = true
    var objDiscoverData : [CommonCellModel] = []
    var userProfileModel : UserProfileModel?
    
    // MARK: Object lifecycle
    override init(nibName nibNameOrNil: String?, bundle nibBundleOrNil: Bundle?) {
        super.init(nibName: nibNameOrNil, bundle: nibBundleOrNil)
        setup()
    }
    
    required init?(coder aDecoder: NSCoder) {
        super.init(coder: aDecoder)
        setup()
    }
    
    // MARK: Setup
    
    private func setup() {
        let viewController = self
        let interactor = DiscoverySettingInteractor()
        let presenter = DiscoverySettingPresenter()
        
        //View Controller will communicate with only presenter
        viewController.presenter = presenter
        //viewController.interactor = interactor
        
        //Presenter will communicate with Interector and Viewcontroller
        presenter.viewController = viewController
        presenter.interactor = interactor
        
        //Interactor will communucate with only presenter.
        interactor.presenter = presenter
    }
    
    
    // MARK: View lifecycle
    
    override func viewDidLoad() {
        super.viewDidLoad()
        self.registerTableViewCell()
    }
    
    func registerTableViewCell(){
        if !isFromMenu {
            self.lblTitle.text = "Edit Interests & Preferences"
            self.viewHeightConstant.constant = 135
            self.btnChange.alpha = 1.0
        } else {
            self.lblTitle.text = "Discovery Settings"
            self.viewHeightConstant.constant = 85
            self.btnChange.alpha = 0.0
        }
        self.tblDiscoverList.register(UINib.init(nibName: Cells.CommonTblListCell, bundle: Bundle.main), forCellReuseIdentifier: Cells.CommonTblListCell)
        
        self.objDiscoverData = [CommonCellModel(title: "Yourself", description: "", isDescAvailable: false), CommonCellModel(title: "Your Desired Partner", description: "", isDescAvailable: false), CommonCellModel(title: "Your Interests", description: "", isDescAvailable: true)]
    }
    
    @IBAction func btnBackAction(_ sender: UIButton) {
        self.popVC()
    }
    @IBAction func btnChangeAction(_ sender: GradientButton) {
        self.userProfileModel?.vInterestAge = self.objDiscoverData[0].description
        self.userProfileModel?.vInterestGender = self.objDiscoverData[1].description
        self.userProfileModel?.vLikedSocialPlatform = self.objDiscoverData[2].description
        self.popVC()
    }
}

extension DiscoverySettingViewController : UITableViewDataSource, UITableViewDelegate {
    func numberOfSections(in tableView: UITableView) -> Int {
        return 1
    }
    
    func tableView(_ tableView: UITableView, numberOfRowsInSection section: Int) -> Int {
        return self.objDiscoverData.count
    }
    
    func tableView(_ tableView: UITableView, cellForRowAt indexPath: IndexPath) -> UITableViewCell {
        let cell = tableView.dequeueReusableCell(withIdentifier: Cells.CommonTblListCell)
        cell?.selectionStyle = .none
        return cell!
    }
    
    func tableView(_ tableView: UITableView, willDisplay cell: UITableViewCell, forRowAt indexPath: IndexPath) {
        if let cell = cell as? CommonTblListCell {
            
            let data = self.objDiscoverData[indexPath.row]
            
            cell.lblTitle.text = data.title
            cell.lblDesc.text = data.description
        }
    }
    
    func tableView(_ tableView: UITableView, heightForRowAt indexPath: IndexPath) -> CGFloat {
        let data = self.objDiscoverData[indexPath.row]
        if data.isDescAvailable {
            return UITableView.automaticDimension
        } else {
            return 70
        }
    }
    
     func tableView(_ tableView: UITableView, didSelectRowAt indexPath: IndexPath) {
        let index = indexPath.row
        let intVC = GeekMeets_StoryBoard.Menu.instantiateViewController(withIdentifier: GeekMeets_ViewController.Interest_PreferenceScreen) as? Interest_PreferenceViewController

        if index == 0 {
            intVC?.header_title = self.objDiscoverData[0].title
            intVC?.objDiscoverData =  [CommonCellModel(title: Interest_PreferenceData.Ethernity.Title, description: "", isDescAvailable: true), CommonCellModel(title: Interest_PreferenceData.Height.Title, description: "", isDescAvailable: true), CommonCellModel(title: Interest_PreferenceData.BodyType.Title, description: "", isDescAvailable: true), CommonCellModel(title: Interest_PreferenceData.Indoor_Outdoor.Title, description: "", isDescAvailable: true), CommonCellModel(title: Interest_PreferenceData.Morning_Night.Title, description: "", isDescAvailable: true)]
            
        } else if index == 1 {
            intVC?.header_title = self.objDiscoverData[1].title
        } else {
            intVC?.header_title = self.objDiscoverData[2].title
        }
        self.pushVC(intVC!)
    }
}

