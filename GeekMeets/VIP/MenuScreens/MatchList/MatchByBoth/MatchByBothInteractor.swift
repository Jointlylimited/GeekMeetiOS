//
//  MatchByBothInteractor.swift
//  GeekMeets
//
//  Created by SOTSYS124 on 11/08/20.
//  Copyright (c) 2020 SOTSYS203. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//

import UIKit

protocol MatchByBothInteractorProtocol {
    func callMatchListAPI()
    func callUnMatchUserAPI(iProfileId : String)
}

protocol MatchByBothDataStore {
    //var name: String { get set }
}

class MatchByBothInteractor: MatchByBothInteractorProtocol, MatchByBothDataStore {
    var presenter: MatchByBothPresentationProtocol?
    //var name: String = ""
    
    // MARK: Do something
    func callMatchListAPI() {
        DefaultLoaderView.sharedInstance.showLoader()
        UserAPI.matches(nonce: authToken.nonce, timestamp: authToken.timeStamps, token: authToken.token, authorization: UserDataModel.authorization, tiType: 0) { (response, error) in
            
            delay(0.2) {
                DefaultLoaderView.sharedInstance.hideLoader()
            }
            if response?.responseCode == 200 {
                self.presenter?.getMatchResponse(response: response!)
            } else if response?.responseCode == 203 {
                AppSingleton.sharedInstance().logout()
                AppSingleton.sharedInstance().showAlert((response?.responseMessage!)!, okTitle: "OK")
            } else if response?.responseCode == 400 {
                self.presenter?.getMatchResponse(response: response!)
            }  else {
                if error != nil {
                    AppSingleton.sharedInstance().showAlert(kSomethingWentWrong, okTitle: "OK")
                } else {
                    self.presenter?.getMatchResponse(response: response!)
                }
            }
        }
    }
    
    func callUnMatchUserAPI(iProfileId : String){
        DefaultLoaderView.sharedInstance.showLoader()
        UserAPI.unMatch(nonce: authToken.nonce, timestamp: authToken.timeStamps, token: authToken.token, authorization: UserDataModel.authorization, vXmppUser: iProfileId) { (response, error) in
            
//            delay(0.2) {
            DefaultLoaderView.sharedInstance.hideLoader()
//            }
            if response?.responseCode == 200 {
                self.presenter?.getUnMatchResponse(response: response!)
            } else if response?.responseCode == 203 {
                AppSingleton.sharedInstance().logout()
                AppSingleton.sharedInstance().showAlert((response?.responseMessage!)!, okTitle: "OK")
            } else if response?.responseCode == 400 {
                self.presenter?.getUnMatchResponse(response: response!)
            }  else {
                if error != nil {
                    AppSingleton.sharedInstance().showAlert(kSomethingWentWrong, okTitle: "OK")
                } else {
                    self.presenter?.getUnMatchResponse(response: response!)
                }
            }
        }
    }
}
