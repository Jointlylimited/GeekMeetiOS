//
//  ManageSubscriptionViewController.swift
//  GeekMeets
//
//  Created by SOTSYS124 on 23/04/20.
//  Copyright (c) 2020 SOTSYS203. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//

import UIKit
import StoreKit

protocol ManageSubscriptionProtocol: class {
    func getSubscriptionResponse(response : SubscriptionResponse)
}

class ManageSubscriptionViewController: UIViewController, ManageSubscriptionProtocol {
    //var interactor : ManageSubscriptionInteractorProtocol?
    var presenter : ManageSubscriptionPresentationProtocol?
    
    // MARK: Object lifecycle
    
    @IBOutlet var btnSubColl: [UIButton]!
    @IBOutlet var btnStackList: [UIButton]!
    
    var productKey : String = ""
    var transactionInProgress = false
    var priceIn : String = "10$"
    var product : SKProduct?
    
    override init(nibName nibNameOrNil: String?, bundle nibBundleOrNil: Bundle?) {
        super.init(nibName: nibNameOrNil, bundle: nibBundleOrNil)
        setup()
    }
    
    required init?(coder aDecoder: NSCoder) {
        super.init(coder: aDecoder)
        setup()
    }
    
    // MARK: Setup
    
    private func setup() {
        let viewController = self
        let interactor = ManageSubscriptionInteractor()
        let presenter = ManageSubscriptionPresenter()
        
        //View Controller will communicate with only presenter
        viewController.presenter = presenter
        //viewController.interactor = interactor
        
        //Presenter will communicate with Interector and Viewcontroller
        presenter.viewController = viewController
        presenter.interactor = interactor
        
        //Interactor will communucate with only presenter.
        interactor.presenter = presenter
    }
    
    
    // MARK: View lifecycle
    
    override func viewDidLoad() {
        super.viewDidLoad()
        setTheme()
    }
    
    func setTheme(){
        for btn in btnStackList {
            btn.titleLabel?.font = DeviceType.iPhone5orSE ? UIFont(name: FontTypePoppins.Poppins_Medium.rawValue, size: 12.0) : UIFont(name: FontTypePoppins.Poppins_Medium.rawValue, size: 16.0)
        }
    }
    @IBAction func btnBackAction(_ sender: UIButton) {
        self.dismissVC(completion: nil)
    }
    
    public func GetNextDayCurrentTimeStamp() -> String {
        let df = DateFormatter()
        let date = NSDate()
        let nextDate = Calendar.current.date(byAdding: .day, value: 1, to: date as Date)
        df.dateFormat = "yyyyMMddhhmmss"
        let NewDate = df.string(from: nextDate as! Date)
        return NewDate.replacingOccurrences(of: ":", with: "")
    }
    
    @IBAction func btnContinueAction(_ sender: UIButton) {
//        self.dismissVC(completion: nil)
//        doSubscription(key : productKey)
        
        let endDate = self.GetNextDayCurrentTimeStamp()
        let param = RequestParameter.sharedInstance().createSubscriptionParams(vTransactionId: "1214665932543", tiType: "1", fPrice: "1.99", vReceiptData: "13ncksncocwbwibck", iStartDate: authToken.timeStamp, iEndDate: endDate)
        self.presenter?.callCreateSubscriptionAPI(param: param)
    }
    
    @IBAction func btnSubscriptionAction(_ sender: UIButton) {
        btnSubColl.forEach{
            $0.isSelected = false
        }
        sender.isSelected = true
        
        if sender.tag == 0 {
            productKey = SubscriptionKeys.Monthly.productKey
        } else {
            productKey = SubscriptionKeys.Annualy.productKey
        }
    }
}

extension ManageSubscriptionViewController {
    func doSubscription(key : String){
        if SKPaymentQueue.canMakePayments() {
            let productRequest = SKProductsRequest(productIdentifiers: [key])
            productRequest.delegate = self
            productRequest.start()
        }
        else {
            //   self.btnCreateVideo.hideLoading()
            //self.btnCreateVideo.isEnabled = false
            print("Cannot perform In App Purchases.")
        }
    }
    
    func getSubscriptionResponse(response : SubscriptionResponse){
        print(response)
        if response.responseCode == 200 {
            UserDataModel.currentUser?.tiIsSubscribed = 1
        }
    }
}

extension ManageSubscriptionViewController : SKProductsRequestDelegate, SKPaymentTransactionObserver {

    func paymentQueue(_ queue: SKPaymentQueue, updatedTransactions transactions: [SKPaymentTransaction]) {
    //    btnCreateVideo.showLoading()
        if let transaction = transactions.first {
            switch transaction.transactionState {
                
            case .purchasing:
                print("Purchasing....")
            
            case .purchased:
                print("Transaction completed successfully.")
          //      btnCreateVideo.hideLoading()
                SKPaymentQueue.default().finishTransaction(transaction)
                transactionInProgress = false
                AppSingleton.sharedInstance().isSubscription = true
                LoaderView.sharedInstance.hideLoader()
                // self.goAhead()
            case .failed:
          //      self.btnCreateVideo.hideLoading()
                print("Transaction Failed");
                LoaderView.sharedInstance.hideLoader()
                SKPaymentQueue.default().finishTransaction(transaction)
                transactionInProgress = false
                AppSingleton.sharedInstance().isSubscription = true
        
            case .restored:
                print("Restored ... ")
            case .deferred:
                LoaderView.sharedInstance.hideLoader()
                print(transaction.transactionState.rawValue)
            }
        }
    }
    
    func productsRequest(_ request: SKProductsRequest, didReceive response: SKProductsResponse) {
     //   btnCreateVideo.showLoading()
        if response.products.count != 0 {
            guard let prod = response.products.first else { LoaderView.sharedInstance.showLoader(); return}
            self.product = prod
            
            let currencyFormatter = NumberFormatter()
            currencyFormatter.locale = prod.priceLocale
            currencyFormatter.maximumFractionDigits = 2
            currencyFormatter.minimumFractionDigits = 2
            currencyFormatter.alwaysShowsDecimalSeparator = true
            currencyFormatter.numberStyle = .currency
            let someAmount = prod.price
            let price: String? = currencyFormatter.string(from: someAmount as NSNumber)

            let formattedPrice = price!
            self.priceIn = formattedPrice
          //  btnCreateVideo.hideLoading()
            //self.btnCreateVideo.isEnabled = true
        }
        else {
        //    btnCreateVideo.hideLoading()
            print("There are no products.")
            LoaderView.sharedInstance.hideLoader()
            request.cancel()
            //self.btnCreateVideo.isEnabled = true
        }
    }
    
    
}
