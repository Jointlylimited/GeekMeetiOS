//
//  NotificationListInteractor.swift
//  GeekMeets
//
//  Created by SOTSYS124 on 15/05/20.
//  Copyright (c) 2020 SOTSYS203. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//

import UIKit

protocol NotificationListInteractorProtocol {
    func callNotificationListAPI(offset: Int, limit: Int)
    func callReadAPI(iNotificationId : String, tiType : String)
     func callBadgeCountAPI()
}

protocol NotificationListDataStore {
    //var name: String { get set }
}

class NotificationListInteractor: NotificationListInteractorProtocol, NotificationListDataStore {
    var presenter: NotificationListPresentationProtocol?
    //var name: String = ""
    
    // MARK: Do something
    func callNotificationListAPI(offset: Int, limit: Int) {
        LoaderView.sharedInstance.showLoader()
        NotificationAPI.listNotification(nonce: authToken.nonce, timestamp: authToken.timeStamp, token: authToken.token, authorization: UserDataModel.authorization, limit: limit, offset: offset) { (response, error) in
            
            delay(0.2) {
                LoaderView.sharedInstance.hideLoader()
            }
            if response?.responseCode == 200 {
                self.presenter?.getNotificationListResponse(response : response!)
            } else if response?.responseCode == 203 {
                AppSingleton.sharedInstance().logout()
            } else {
                if error != nil {
                    AppSingleton.sharedInstance().showAlert(kSomethingWentWrong, okTitle: "OK")
                } else {
                    self.presenter?.getNotificationListResponse(response : response!)
                }
            }
        }
    }
    
    func callReadAPI(iNotificationId : String, tiType : String) {
        if iNotificationId != "" {
//            LoaderView.sharedInstance.showLoader()
            NotificationAPI.viewNotification(nonce: authToken.nonce, timestamp: Int(authToken.timeStamp)!, token: authToken.token, authorization: UserDataModel.authorization, iNotificationId: iNotificationId, tiType: tiType) { (response, error) in
                
//                delay(0.2) {
//                    LoaderView.sharedInstance.hideLoader()
//                }
                if response?.responseCode == 200 {
                    self.presenter?.getReadNotificationResponse(response: response!)
                } else if response?.responseCode == 203 {
                    AppSingleton.sharedInstance().logout()
                }  else {
                    if error != nil {
                        AppSingleton.sharedInstance().showAlert(kSomethingWentWrong, okTitle: "OK")
                    } else {
                        self.presenter?.getReadNotificationResponse(response: response!)
                    }
                }
            }
        } else {
//            LoaderView.sharedInstance.showLoader()
            NotificationAPI.viewNotification(nonce: authToken.nonce, timestamp: Int(authToken.timeStamp)!, token: authToken.token, authorization: UserDataModel.authorization, iNotificationId: iNotificationId, tiType: tiType, isClearAll: 1) { (response, error) in
                
//                delay(0.2) {
//                    LoaderView.sharedInstance.hideLoader()
//                }
                if response?.responseCode == 200 {
                    self.presenter?.getClearAllNotificationResponse(response: response!)
                } else if response?.responseCode == 203 {
                    AppSingleton.sharedInstance().logout()
                }  else {
                    if error != nil {
                        AppSingleton.sharedInstance().showAlert(kSomethingWentWrong, okTitle: "OK")
                    } else {
                        self.presenter?.getClearAllNotificationResponse(response: response!)
                    }
                }
            }
        }
    }
    
    func callBadgeCountAPI(){
        LoaderView.sharedInstance.showLoader()
        NotificationAPI.budgeCount(nonce: authToken.nonce, timestamp: Int(authToken.timeStamp)!, token: authToken.token, authorization: UserDataModel.authorization) { (response, error) in
            
            delay(0.2) {
                LoaderView.sharedInstance.hideLoader()
            }
            if response?.responseCode == 200 {
                self.presenter?.getBadgeCountResponse(response: response!)
            } else if response?.responseCode == 203 {
                AppSingleton.sharedInstance().logout()
            }  else {
                if error != nil {
                    AppSingleton.sharedInstance().showAlert(kSomethingWentWrong, okTitle: "OK")
                } else {
                    self.presenter?.getBadgeCountResponse(response: response!)
                }
            }
        }
    }
}
