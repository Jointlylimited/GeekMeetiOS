//
//  TutorialPageViewController.swift
//  GeekMeets
//
//  Created by SOTSYS216 on 13/04/20.
//  Copyright (c) 2020 SOTSYS203. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//

import UIKit

protocol TutorialPageProtocol: class {
    func displaySomething()
}

class TutorialPageViewController: UIViewController, TutorialPageProtocol {
  
    //var interactor : TutorialPageInteractorProtocol?
    var presenter : TutorialPagePresentationProtocol?
    
    @IBOutlet var clViewTutorial : UICollectionView!
    @IBOutlet weak var pageControl: UIPageControl!
    @IBOutlet weak var btnNext: UIButton!
  var tutorialData : [TutorialData] = [.firstPage, .secondPage, .thirdPage]
    // MARK: Object lifecycle
    
    override init(nibName nibNameOrNil: String?, bundle nibBundleOrNil: Bundle?) {
        super.init(nibName: nibNameOrNil, bundle: nibBundleOrNil)
        setup()
    }
    
    required init?(coder aDecoder: NSCoder) {
        super.init(coder: aDecoder)
        setup()
    }
    
    // MARK: Setup
    
    private func setup() {
        let viewController = self
        let interactor = TutorialPageInteractor()
        let presenter = TutorialPagePresenter()
        
        //View Controller will communicate with only presenter
        viewController.presenter = presenter
        //viewController.interactor = interactor
        
        //Presenter will communicate with Interector and Viewcontroller
        presenter.viewController = viewController
        presenter.interactor = interactor
        
        //Interactor will communucate with only presenter.
        interactor.presenter = presenter
    }
    
    
    // MARK: View lifecycle
    
    override func viewDidLoad() {
        super.viewDidLoad()
        doSomething()
    }
    
    // MARK: Do something
    
    //@IBOutlet weak var nameTextField: UITextField!
    
    func doSomething() {
      
      clViewTutorial.frame.size = self.view.frame.size
        
    }
    
    func displaySomething() {
        //nameTextField.text = viewModel.name
    }
  
   // MARK:- IBAction Method
  
  @IBAction func actionNext(_ sender : UIButton)
  {
      if pageControl.currentPage == self.tutorialData.count - 1
      {
        
//          if UserResponse.isUserLoggedIn
//          {
//              self.navBar?.isHidden = false
//              self.navigationController?.popViewController(animated: false)
//          }
//          else
//          {
//              self.presenter?.actionNextButton()
//          }
        self.presenter?.actionNextButton()
        
      }
      else
      {
          let visibleItems: NSArray = self.clViewTutorial.indexPathsForVisibleItems as NSArray
          let currentItem: IndexPath = visibleItems.object(at: 0) as! IndexPath
          let nextItem: IndexPath = IndexPath(item: currentItem.item + 1, section: 0)
          // This is where I'm trying to detect the value
          if nextItem.row < tutorialData.count {
              self.clViewTutorial.scrollToItem(at: nextItem, at: .left, animated: true)
              pageControl.currentPage = nextItem.row
            if nextItem.row == 2{
              btnNext.setTitle("Continue",for: .normal)
            }
          }
      }
  }
  @IBAction func actionSkip(_ sender : UIButton)
    {
        
    }
  
}


//MARK:- UICollectionView Delegate and DataSource
extension TutorialPageViewController : UICollectionViewDelegate, UICollectionViewDataSource, UICollectionViewDelegateFlowLayout
{
    func collectionView(_ collectionView: UICollectionView, numberOfItemsInSection section: Int) -> Int {
        return 3
    }
    
    func collectionView(_ collectionView: UICollectionView, cellForItemAt indexPath: IndexPath) -> UICollectionViewCell
    {
        let cell : TutorialCell = collectionView.dequeueReusableCell(withReuseIdentifier: "cell", for: indexPath) as! TutorialCell
        cell.tutorialData = self.tutorialData[indexPath.row]
        return cell
    }
    
    func collectionView(_ collectionView: UICollectionView, layout collectionViewLayout: UICollectionViewLayout, sizeForItemAt indexPath: IndexPath) -> CGSize {
       let screenSize = UIScreen.main.bounds.size
             return screenSize
    }
    
    func scrollViewDidEndDecelerating(_ scrollView: UIScrollView)
    {
      pageControl.currentPage = Int(scrollView.contentOffset.x) / Int(scrollView.frame.width)
//        for cell in self.clViewTutorial.visibleCells
//        {
//          let indexpath = self.clViewTutorial.indexPath(for: cell)
//          pageController.set(progress: (indexpath?.row)!, animated: true)
//      }
      
    }
 
}
