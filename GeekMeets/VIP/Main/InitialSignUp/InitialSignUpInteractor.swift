//
//  InitialSignUpInteractor.swift
//  GeekMeets
//
//  Created by SOTSYS216 on 15/04/20.
//  Copyright (c) 2020 SOTSYS203. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//

import UIKit
import SCSDKLoginKit

protocol InitialSignUpInteractorProtocol {
    func callFBLogin()
    
    func callSocialSignInAPI(params : Dictionary<String, String>)
    func callSnapchatLogin(objLoginVC : InitialSignUpViewController)
    
    func callQuestionaryAPI()
}

protocol InitialSignUpDataStore {
    //var name: String { get set }
}

class InitialSignUpInteractor: InitialSignUpInteractorProtocol, InitialSignUpDataStore {
    var presenter: InitialSignUpPresentationProtocol?
    //var name: String = ""
    let objConfig = SOGoogleConfig()
    
    func callFBLogin() {
        HSFacebookLoginManager.manager.loginWithFacebook(in: AppDelObj.window!.rootViewController!) { (result, isLogout, error) -> (Void) in
            
            print("result:= \(String(describing: result))")
            print("isLogout:= \(isLogout)")
            print("error:= \(String(describing: error))")
            
            guard let _ = result else {
                
                var errorrr = "Please try again"
                
                if error != nil {
                    errorrr = error!.localizedDescription
                }
                
                if !isLogout {
                    AppSingleton.sharedInstance().showAlert("Facebook Error", okTitle: errorrr)
                }
                return;
            }
            
            self.presenter?.getFBResponse(response: result!)
        }
    }
  
    func callSnapchatLogin(objLoginVC : InitialSignUpViewController) {
        SCSDKLoginClient.login(from: AppDelObj.window!.rootViewController!, completion: { success, error in

            let authToken = SCSDKLoginClient.getAccessToken()
            if let error = error {
                print(error.localizedDescription)
                AppSingleton.sharedInstance().showAlert(error.localizedDescription, okTitle: "OK")
                return
            }

            if success {
                self.fetchSnapUserInfo({ (userEntity, error) in
                    
                    if let userEntity = userEntity {
                        DispatchQueue.main.async {
                            print(userEntity)
                            self.presenter?.callSnapchatLoginResponse(token: userEntity.externalId!, entity: userEntity)
                        }
                    }
                })
            }
        })
    }
        
      private func fetchSnapUserInfo(_ completion: @escaping ((UserEntity?, Error?) -> ())){
          let graphQLQuery = "{me{displayName bitmoji{avatar} externalId}}"
          
          SCSDKLoginClient
              .fetchUserData(
                  withQuery: graphQLQuery,
                  variables: nil,
                  success: { userInfo in
                      
                      if let userInfo = userInfo,
                          let data = try? JSONSerialization.data(withJSONObject: userInfo, options: .prettyPrinted),
                          let userEntity = try? JSONDecoder().decode(UserEntity.self, from: data) {
//                         let data1 = userInfo["data"] as? [String: Any]
//                        userEntity.externalID = data1
                          completion(userEntity, nil)
                      }
              }) { (error, isUserLoggedOut) in
                  completion(nil, error)
          }
      }
    
    func callSocialSignInAPI(params: Dictionary<String, String>) {
        LoaderView.sharedInstance.showLoader()
        UserDataModel.setSocialType(socialType: params["tiSocialType"]!)
        UserAPI.socialSignin(nonce: authToken.nonce, timestamp: Int(authToken.timeStamp)!, token: authToken.token, language:APPLANGUAGE.english , tiSocialType: UserAPI.TiSocialType_socialSignin(rawValue: params["tiSocialType"]!)!, vAccessToken: params["accessKey"]!, vTimeOffset: vTimeOffset, vTimeZone: vTimeZone, vDeviceToken: vDeviceToken, tiDeviceType: UserAPI.TiDeviceType_socialSignin(rawValue: 1)!, vDeviceName: vDeviceName, vDeviceUniqueId: vDeviceUniqueId ?? "", vApiVersion: vApiVersion, vAppVersion: vAppVersion, vOsVersion: vOSVersion, vIpAddress: vIPAddress) { (response, error) in
            
            delay(0.2) {
                LoaderView.sharedInstance.hideLoader()
            }
            
            if response?.responseCode == 200 {
                self.presenter?.getLoginResponse(userData : response)
            } else if response?.responseCode == 203 {
                self.objConfig.googleSignOut()
                AppSingleton.sharedInstance().logout()
                AppSingleton.sharedInstance().showAlert((response?.responseMessage!)!, okTitle: "OK")
            } else if response?.responseCode == 209 {
                let data = response?.responseData
                self.presenter?.gotoSignUpScreen(signParams : data!)
            }
            else {
                self.objConfig.googleSignOut()
                if error != nil {
                    AppSingleton.sharedInstance().showAlert(kSomethingWentWrong, okTitle: "OK")
                } else {
                    AppSingleton.sharedInstance().showAlert((response?.responseMessage!)!, okTitle: "OK")
                }
            }

        }
    }
    
    func callQuestionaryAPI() {
//        LoaderView.sharedInstance.showLoader()
        PreferencesAPI.list(nonce: authToken.nonce, timestamp: Int(authToken.timeStamp)!, token: authToken.token, language: APPLANGUAGE.english, authorization: UserDataModel.authorization) { (response, error) in
            delay(0.2) {
                LoaderView.sharedInstance.hideLoader()
            }
            if response?.responseCode == 200 {
                self.presenter?.getPrefernceResponse(response : response!)
            } else if response?.responseCode == 203 {
                AppSingleton.sharedInstance().logout()
                AppSingleton.sharedInstance().showAlert((response?.responseMessage!)!, okTitle: "OK")
            } else {
                if error != nil {
                    AppSingleton.sharedInstance().showAlert(kSomethingWentWrong, okTitle: "OK")
                } else {
                    AppSingleton.sharedInstance().showAlert((response?.responseMessage!)!, okTitle: "OK")
                }
            }
            
        }
    }
}
