//
//  InitialLoginInteractor.swift
//  GeekMeets
//
//  Created by SOTSYS216 on 16/04/20.
//  Copyright (c) 2020 SOTSYS203. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//

import UIKit
import GoogleSignIn
import FacebookLogin
import FacebookCore
import SCSDKLoginKit

protocol InitialLoginInteractorProtocol {
    func doSomething()
    func callSocialLoginApi(params : Dictionary<String, String>)
    func callFacebookLogin(objLoginVC : InitialLoginViewController)
    func callSnapchatLogin(objLoginVC : InitialLoginViewController)
}

protocol InitialLoginDataStore {
    //var name: String { get set }
}

class InitialLoginInteractor: InitialLoginInteractorProtocol, InitialLoginDataStore {
    var presenter: InitialLoginPresentationProtocol?
    //var name: String = ""
    
    // MARK: Do something
    func doSomething() {
        
    }
  
    func callFacebookLogin(objLoginVC : InitialLoginViewController) {
        
            let loginManager = LoginManager()
              loginManager.logIn(permissions: [.publicProfile, .email], viewController: objLoginVC) { (result) in

               // self.loginManagerDidComplete(result)
              switch result {
                  case .cancelled:
                    print("cancelled")
              //      alertController = UIAlertController(title: "Login Cancelled", message: "User cancelled login.")
                  case .failed(let error):
              //      alertController = UIAlertController(title: "Login Fail", message: "Login failed with error \(error)")
                    print("cancelled")

                  case .success(let grantedPermissions, let declinedPermissions,let accesToken):
              //      alertController = UIAlertController(title: "Login Success",
              //                                          message: "Login succeeded with granted permissions: \(grantedPermissions)")
                    print("Login succeeded with granted Token: \(accesToken.tokenString)")
                    let params = RequestParameter.sharedInstance().socialLoginParam(accessToken: accesToken.tokenString, service: "facebook")
                    self.callSocialLoginApi(params: params)
                                    
                  }
          }
         
         
            }
  
    func callSnapchatLogin(objLoginVC : InitialLoginViewController) {
    
        SCSDKLoginClient.login(from: objLoginVC, completion: { success, error in

            if let error = error {
                print(error.localizedDescription)
                return
            }

            if success {
                self.fetchSnapUserInfo() //used in the demo app to get user info
            }
        })
     
     
        }
    
  
    private func fetchSnapUserInfo(){
        let graphQLQuery = "{me{displayName, bitmoji{avatar}}}"

        SCSDKLoginClient
            .fetchUserData(
                withQuery: graphQLQuery,
                variables: nil,
                success: { userInfo in

                    if let userInfo = userInfo,
                        let data = try? JSONSerialization.data(withJSONObject: userInfo, options: .prettyPrinted) {
                          print(data)
//                        DispatchQueue.main.async {
//                            self.goToLoginConfirm(userEntity)
//                        }
                    }
            }) { (error, isUserLoggedOut) in
                print(error?.localizedDescription ?? "")
        }
    }
  
    func callSocialLoginApi(params : Dictionary<String, String>){

//      let authenticationObj = AuthenticationObj.getAutheticationToken()
        UserAPI.socialSignin(nonce: authToken.nonce, timestamp: Int(authToken.timeStamp)!, token: authToken.token, language: "English", tiSocialType: UserAPI.TiSocialType_socialSignin(rawValue: "1")!, vAccessToken: "String", vTimeOffset: "12345", vTimeZone: "Kolkata", vDeviceToken: "12345", tiDeviceType: UserAPI.TiDeviceType_socialSignin(rawValue: 0)!, vDeviceName:
      "", vDeviceUniqueId: "123", vApiVersion: "1.0", vAppVersion: "1.0", vOsVersion: "11.0", vIpAddress: "19.168.0.0"){ (userResponse, error) in
          if error == nil
          {
           print(userResponse)
          }
      }
    }
}
