//
// BoostGeekAPI.swift
//
// Generated by swagger-codegen
// https://github.com/swagger-api/swagger-codegen
//

import Foundation
import Alamofire



open class BoostGeekAPI {
    /**
     Active boost/geek plan
     
     - parameter nonce: (header)
     - parameter timestamp: (header)
     - parameter token: (header)
     - parameter authorization: (header)
     - parameter tiPlanType: (form) 1-boost,2-geek
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func activeBoostGeek(nonce: String, timestamp: Int, token: String, authorization: String, tiPlanType: Int, completion: @escaping ((_ data: BoostGeekResponse?,_ error: Error?) -> Void)) {
        activeBoostGeekWithRequestBuilder(nonce: nonce, timestamp: timestamp, token: token, authorization: authorization, tiPlanType: tiPlanType).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     Active boost/geek plan
     - POST /boost-geek-plans/active-boost-geek
     - examples: [{contentType=application/json, example=""}]
     
     - parameter nonce: (header)
     - parameter timestamp: (header)
     - parameter token: (header)
     - parameter authorization: (header)
     - parameter tiPlanType: (form) 1-boost,2-geek

     - returns: RequestBuilder<BoostGeekResponse>
     */
    open class func activeBoostGeekWithRequestBuilder(nonce: String, timestamp: Int, token: String, authorization: String, tiPlanType: Int) -> RequestBuilder<BoostGeekResponse> {
        let path = "/boost-geek-plans/active-boost-geek"
        let URLString = SwaggerClientAPI.basePath + path
        let formParams: [String:Any?] = [
            "tiPlanType": tiPlanType.encodeToJSON()
        ]

        let nonNullParameters = APIHelper.rejectNil(formParams)
        let parameters = APIHelper.convertBoolToString(nonNullParameters)
        
        let url = URLComponents(string: URLString)
        let nillableHeaders: [String: Any?] = [
            "nonce": nonce,
            "timestamp": timestamp.encodeToJSON(),
            "token": token,
            "authorization": authorization
        ]
        let headerParameters = APIHelper.rejectNilHeaders(nillableHeaders)

        let requestBuilder: RequestBuilder<BoostGeekResponse>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false, headers: headerParameters)
    }

    /**
     details of boost nad geek plans
     
     - parameter nonce: (header)
     - parameter timestamp: (header)
     - parameter token: (header)
     - parameter authorization: (header)
     - parameter tiType: (path) 1-boost,2-geek
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func boostGeekPlans(nonce: String, timestamp: String, token: String, authorization: String, tiType: Int, completion: @escaping ((_ data: BoostGeekResponse?,_ error: Error?) -> Void)) {
        boostGeekPlansWithRequestBuilder(nonce: nonce, timestamp: timestamp, token: token, authorization: authorization, tiType: tiType).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     details of boost nad geek plans
     - GET /boost-geek-plans/detail/{tiType}
     - examples: [{contentType=application/json, example=""}]
     
     - parameter nonce: (header)
     - parameter timestamp: (header)
     - parameter token: (header)
     - parameter authorization: (header)
     - parameter tiType: (path) 1-boost,2-geek

     - returns: RequestBuilder<BoostGeekResponse>
     */
    open class func boostGeekPlansWithRequestBuilder(nonce: String, timestamp: String, token: String, authorization: String, tiType: Int) -> RequestBuilder<BoostGeekResponse> {
        var path = "/boost-geek-plans/detail/{tiType}"
        let tiTypePreEscape = "\(tiType)"
        let tiTypePostEscape = tiTypePreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{tiType}", with: tiTypePostEscape, options: .literal, range: nil)
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        let url = URLComponents(string: URLString)
        let nillableHeaders: [String: Any?] = [
            "nonce": nonce,
            "timestamp": timestamp,
            "token": token,
            "authorization": authorization
        ]
        let headerParameters = APIHelper.rejectNilHeaders(nillableHeaders)

        let requestBuilder: RequestBuilder<BoostGeekResponse>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false, headers: headerParameters)
    }

    /**
     Purchase boost/geek plan
     
     - parameter nonce: (header)
     - parameter timestamp: (header)
     - parameter token: (header)
     - parameter authorization: (header)
     - parameter tiPlanType: (form) 1-boost,2-geek,3-combine
     - parameter fPlanPrice: (form)
     - parameter vPurchaseDate: (form)
     - parameter iBoostCount: (form) pass the number of boost (optional)
     - parameter iGeekCount: (form) pass the number of geek (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func createBoostGeek(nonce: String, timestamp: Int, token: String, authorization: String, tiPlanType: Int, fPlanPrice: String, vPurchaseDate: String, iBoostCount: Int? = nil, iGeekCount: Int? = nil, completion: @escaping ((_ data: BoostGeekResponse?,_ error: Error?) -> Void)) {
        createBoostGeekWithRequestBuilder(nonce: nonce, timestamp: timestamp, token: token, authorization: authorization, tiPlanType: tiPlanType, fPlanPrice: fPlanPrice, vPurchaseDate: vPurchaseDate, iBoostCount: iBoostCount, iGeekCount: iGeekCount).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     Purchase boost/geek plan
     - POST /boost-geek-plans/create
     - examples: [{contentType=application/json, example=""}]
     
     - parameter nonce: (header)
     - parameter timestamp: (header)
     - parameter token: (header)
     - parameter authorization: (header)
     - parameter tiPlanType: (form) 1-boost,2-geek,3-combine
     - parameter fPlanPrice: (form)
     - parameter vPurchaseDate: (form)
     - parameter iBoostCount: (form) pass the number of boost (optional)
     - parameter iGeekCount: (form) pass the number of geek (optional)

     - returns: RequestBuilder<BoostGeekResponse>
     */
    open class func createBoostGeekWithRequestBuilder(nonce: String, timestamp: Int, token: String, authorization: String, tiPlanType: Int, fPlanPrice: String, vPurchaseDate: String, iBoostCount: Int? = nil, iGeekCount: Int? = nil) -> RequestBuilder<BoostGeekResponse> {
        let path = "/boost-geek-plans/create"
        let URLString = SwaggerClientAPI.basePath + path
        let formParams: [String:Any?] = [
            "tiPlanType": tiPlanType.encodeToJSON(),
            "fPlanPrice": fPlanPrice,
            "vPurchaseDate": vPurchaseDate,
            "iBoostCount": iBoostCount?.encodeToJSON(),
            "iGeekCount": iGeekCount?.encodeToJSON()
        ]

        let nonNullParameters = APIHelper.rejectNil(formParams)
        let parameters = APIHelper.convertBoolToString(nonNullParameters)
        
        let url = URLComponents(string: URLString)
        let nillableHeaders: [String: Any?] = [
            "nonce": nonce,
            "timestamp": timestamp.encodeToJSON(),
            "token": token,
            "authorization": authorization
        ]
        let headerParameters = APIHelper.rejectNilHeaders(nillableHeaders)

        let requestBuilder: RequestBuilder<BoostGeekResponse>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false, headers: headerParameters)
    }

}
